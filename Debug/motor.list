
motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d08  08007d08  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  200000fc  08007e0c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  08007e0c  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f1e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0e  00000000  00000000  0003304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f83  00000000  00000000  00037f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e5e  00000000  00000000  00050ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6fc  00000000  00000000  00064d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f443d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  000f4490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c90 	.word	0x08007c90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007c90 	.word	0x08007c90

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
void yavasla();
void geridonus();
void fren();

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  HAL_Init();
 80004e0:	f000 fa46 	bl	8000970 <HAL_Init>

  SystemClock_Config();
 80004e4:	f000 f81e 	bl	8000524 <SystemClock_Config>

  MX_GPIO_Init();
 80004e8:	f000 f8fa 	bl	80006e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ec:	f000 f882 	bl	80005f4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f006 feb8 	bl	8007264 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);   // Start first motor clock wise rotation
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x40>)
 80004fc:	f000 fd64 	bl	8000fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x40>)
 8000508:	f000 fd5e 	bl	8000fc8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);               //Initialize stm32 timer 2
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x44>)
 800050e:	f002 fcb1 	bl	8002e74 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000512:	2100      	movs	r1, #0
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x44>)
 8000516:	f002 fd61 	bl	8002fdc <HAL_TIM_PWM_Start>


  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x3e>
 800051c:	40020400 	.word	0x40020400
 8000520:	20000118 	.word	0x20000118

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fba4 	bl	8007c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <SystemClock_Config+0xc8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xcc>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000598:	2348      	movs	r3, #72	; 0x48
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 ffa3 	bl	80024f4 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f8e6 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2102      	movs	r1, #2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fa05 	bl	80029e4 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e0:	f000 f8d0 	bl	8000784 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	; 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_TIM2_Init+0xe8>)
 8000626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1439;
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_TIM2_Init+0xe8>)
 800062e:	f240 529f 	movw	r2, #1439	; 0x59f
 8000632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_TIM2_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_TIM2_Init+0xe8>)
 800063c:	2263      	movs	r2, #99	; 0x63
 800063e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_TIM2_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_TIM2_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <MX_TIM2_Init+0xe8>)
 800064e:	f002 fbc1 	bl	8002dd4 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000658:	f000 f894 	bl	8000784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	4619      	mov	r1, r3
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_TIM2_Init+0xe8>)
 800066a:	f002 fe29 	bl	80032c0 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000674:	f000 f886 	bl	8000784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <MX_TIM2_Init+0xe8>)
 800067a:	f002 fc55 	bl	8002f28 <HAL_TIM_PWM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000684:	f000 f87e 	bl	8000784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_TIM2_Init+0xe8>)
 8000698:	f003 f9a6 	bl	80039e8 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006a2:	f000 f86f 	bl	8000784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	2360      	movs	r3, #96	; 0x60
 80006a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <MX_TIM2_Init+0xe8>)
 80006be:	f002 fd3d 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006c8:	f000 f85c 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <MX_TIM2_Init+0xe8>)
 80006ce:	f000 f8a7 	bl	8000820 <HAL_TIM_MspPostInit>

}
 80006d2:	bf00      	nop
 80006d4:	3738      	adds	r7, #56	; 0x38
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000118 	.word	0x20000118

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_GPIO_Init+0x9c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_GPIO_Init+0x9c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <MX_GPIO_Init+0x9c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000752:	f000 fc39 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000756:	f44f 7360 	mov.w	r3, #896	; 0x380
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000770:	f000 faa6 	bl	8000cc0 <HAL_GPIO_Init>

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f0:	d10d      	bne.n	800080e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_TIM_Base_MspInit+0x3c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_TIM_Base_MspInit+0x3c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_TIM_Base_MspInit+0x3c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d11d      	bne.n	800087e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_TIM_MspPostInit+0x68>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_TIM_MspPostInit+0x68>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_TIM_MspPostInit+0x68>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085e:	2301      	movs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <HAL_TIM_MspPostInit+0x6c>)
 800087a:	f000 fa21 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89a 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <OTG_FS_IRQHandler+0x10>)
 80008ea:	f000 fcd6 	bl	800129a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20001644 	.word	0x20001644

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f007 f975 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdc5 	bl	80004dc <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000960:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 8000964:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000968:	20001d70 	.word	0x20001d70

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f94f 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fef4 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f967 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f92f 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000160 	.word	0x20000160

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000160 	.word	0x20000160

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e159      	b.n	8000f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8148 	bne.w	8000f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a2 	beq.w	8000f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a52      	ldr	r2, [pc, #328]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x1fe>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a46      	ldr	r2, [pc, #280]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x1f6>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x1f2>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4935      	ldr	r1, [pc, #212]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f aea2 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffc:	b08f      	sub	sp, #60	; 0x3c
 8000ffe:	af0a      	add	r7, sp, #40	; 0x28
 8001000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e10f      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f006 fafc 	bl	8007624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fe4f 	bl	8003cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	687e      	ldr	r6, [r7, #4]
 8001058:	466d      	mov	r5, sp
 800105a:	f106 0410 	add.w	r4, r6, #16
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106a:	e885 0003 	stmia.w	r5, {r0, r1}
 800106e:	1d33      	adds	r3, r6, #4
 8001070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f002 fd26 	bl	8003ac4 <USB_CoreInit>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0d0      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fe3d 	bl	8003d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e04a      	b.n	8001132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	333d      	adds	r3, #61	; 0x3d
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	333c      	adds	r3, #60	; 0x3c
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	b298      	uxth	r0, r3
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3344      	adds	r3, #68	; 0x44
 80010d8:	4602      	mov	r2, r0
 80010da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	3340      	adds	r3, #64	; 0x40
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3348      	adds	r3, #72	; 0x48
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	334c      	adds	r3, #76	; 0x4c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3354      	adds	r3, #84	; 0x54
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	3301      	adds	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3af      	bcc.n	800109c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e044      	b.n	80011cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	3301      	adds	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3b5      	bcc.n	8001142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	687e      	ldr	r6, [r7, #4]
 80011de:	466d      	mov	r5, sp
 80011e0:	f106 0410 	add.w	r4, r6, #16
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011f4:	1d33      	adds	r3, r6, #4
 80011f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f002 fdd5 	bl	8003da8 <USB_DevInit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e00d      	b.n	800122c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 ff24 	bl	8005072 <USB_DevDisconnect>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001234 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_PCD_Start+0x1c>
 800124c:	2302      	movs	r3, #2
 800124e:	e020      	b.n	8001292 <HAL_PCD_Start+0x5e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	2b01      	cmp	r3, #1
 800125e:	d109      	bne.n	8001274 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fd27 	bl	8003ccc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fed4 	bl	8005030 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b08d      	sub	sp, #52	; 0x34
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 ff92 	bl	80051da <USB_GetMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 848a 	bne.w	8001bd2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fef6 	bl	80050b4 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8480 	beq.w	8001bd0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fee3 	bl	80050b4 <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d107      	bne.n	8001308 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f002 0202 	and.w	r2, r2, #2
 8001306:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fed1 	bl	80050b4 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b10      	cmp	r3, #16
 800131a:	d161      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f003 020f 	and.w	r2, r3, #15
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	0c5b      	lsrs	r3, r3, #17
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	2b02      	cmp	r3, #2
 8001356:	d124      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d035      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	6a38      	ldr	r0, [r7, #32]
 8001378:	f003 fd08 	bl	8004d8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001388:	441a      	add	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139a:	441a      	add	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	e016      	b.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	0c5b      	lsrs	r3, r3, #17
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d110      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013b4:	2208      	movs	r2, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	6a38      	ldr	r0, [r7, #32]
 80013ba:	f003 fce7 	bl	8004d8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ca:	441a      	add	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0210 	orr.w	r2, r2, #16
 80013de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fe65 	bl	80050b4 <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f4:	f040 80a7 	bne.w	8001546 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fe6a 	bl	80050da <USB_ReadDevAllOutEpInterrupt>
 8001406:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001408:	e099      	b.n	800153e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 808e 	beq.w	8001532 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fe8e 	bl	8005142 <USB_ReadDevOutEPInterrupt>
 8001426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2301      	movs	r3, #1
 8001442:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fec2 	bl	80021d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00c      	beq.n	8001470 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2308      	movs	r3, #8
 8001466:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 ff98 	bl	80023a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	2310      	movs	r3, #16
 800148a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	d109      	bne.n	80014b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2200      	movs	r2, #0
 80014d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 f99b 	bl	800781c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2302      	movs	r3, #2
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	2320      	movs	r3, #32
 8001512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152a:	461a      	mov	r2, r3
 800152c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001530:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f af62 	bne.w	800140a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fdb2 	bl	80050b4 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800155a:	f040 80db 	bne.w	8001714 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fdd3 	bl	800510e <USB_ReadDevAllInEpInterrupt>
 8001568:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800156e:	e0cd      	b.n	800170c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80c2 	beq.w	8001700 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fdf9 	bl	800517e <USB_ReadDevInEPInterrupt>
 800158c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d057      	beq.n	8001648 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2201      	movs	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015b8:	4013      	ands	r3, r2
 80015ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d132      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	334c      	adds	r3, #76	; 0x4c
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4419      	add	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4403      	add	r3, r0
 800160a:	334c      	adds	r3, #76	; 0x4c
 800160c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3354      	adds	r3, #84	; 0x54
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001634:	461a      	mov	r2, r3
 8001636:	2101      	movs	r1, #1
 8001638:	f003 fe00 	bl	800523c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f006 f86f 	bl	8007726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2308      	movs	r3, #8
 8001662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2310      	movs	r3, #16
 800167e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d023      	beq.n	80016ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f002 fce1 	bl	8004070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	3338      	adds	r3, #56	; 0x38
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	3304      	adds	r3, #4
 80016c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2200      	movs	r2, #0
 80016ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f006 f8b2 	bl	8007840 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	2302      	movs	r3, #2
 80016ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fcdb 	bl	80020b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f af2e 	bne.w	8001570 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fccb 	bl	80050b4 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001728:	d122      	bne.n	8001770 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fec2 	bl	80024dc <HAL_PCDEx_LPM_Callback>
 8001758:	e002      	b.n	8001760 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f006 f850 	bl	8007800 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800176e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fc9d 	bl	80050b4 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001784:	d112      	bne.n	80017ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f006 f80c 	bl	80077b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017aa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fc7f 	bl	80050b4 <USB_ReadInterrupts>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	f040 80b7 	bne.w	8001932 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2110      	movs	r1, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fc46 	bl	8004070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e8:	e046      	b.n	8001878 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	461a      	mov	r2, r3
 80017f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180e:	0151      	lsls	r1, r2, #5
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	440a      	add	r2, r1
 8001814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001830:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	0151      	lsls	r1, r2, #5
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	440a      	add	r2, r1
 8001848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800184c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	0151      	lsls	r1, r2, #5
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	440a      	add	r2, r1
 8001868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800186c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001870:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	3301      	adds	r3, #1
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	429a      	cmp	r2, r3
 8001880:	d3b3      	bcc.n	80017ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001894:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ae:	f043 030b 	orr.w	r3, r3, #11
 80018b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f043 030b 	orr.w	r3, r3, #11
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	e015      	b.n	80018f8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f2:	f043 030b 	orr.w	r3, r3, #11
 80018f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001906:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800190a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800191c:	461a      	mov	r2, r3
 800191e:	f003 fc8d 	bl	800523c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fbbc 	bl	80050b4 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001946:	d124      	bne.n	8001992 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fc52 	bl	80051f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fc07 	bl	800416a <USB_GetDevSpeed>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	f001 fa28 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 800196c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f002 f906 	bl	8003b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f005 fefa 	bl	8007776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001990:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fb8c 	bl	80050b4 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d10a      	bne.n	80019bc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f005 fed7 	bl	800775a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f002 0208 	and.w	r2, r2, #8
 80019ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fb77 	bl	80050b4 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d122      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e014      	b.n	8001a0c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fb27 	bl	8002054 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d3e5      	bcc.n	80019e2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fb4a 	bl	80050b4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d13b      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e02b      	b.n	8001a8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3340      	adds	r3, #64	; 0x40
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d115      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da12      	bge.n	8001a84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	333f      	adds	r3, #63	; 0x3f
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fae8 	bl	8002054 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3ce      	bcc.n	8001a32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fb03 	bl	80050b4 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ab8:	d155      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e045      	b.n	8001b4c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d12e      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da2b      	bge.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001afa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d121      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6053      	str	r3, [r2, #4]
            break;
 8001b44:	e007      	b.n	8001b56 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3b4      	bcc.n	8001ac0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 faa2 	bl	80050b4 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d10a      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f005 fe71 	bl	8007864 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fa8c 	bl	80050b4 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d115      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f005 fe61 	bl	8007880 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e000      	b.n	8001bd2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001bd0:	bf00      	nop
    }
  }
}
 8001bd2:	3734      	adds	r7, #52	; 0x34
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}

08001bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_SetAddress+0x1a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e013      	b.n	8001c1a <HAL_PCD_SetAddress+0x42>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 f9ea 	bl	8004fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	70fb      	strb	r3, [r7, #3]
 8001c34:	460b      	mov	r3, r1
 8001c36:	803b      	strh	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da0f      	bge.n	8001c68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3338      	adds	r3, #56	; 0x38
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	705a      	strb	r2, [r3, #1]
 8001c66:	e00f      	b.n	8001c88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 020f 	and.w	r2, r3, #15
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3304      	adds	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c94:	883a      	ldrh	r2, [r7, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	78ba      	ldrb	r2, [r7, #2]
 8001c9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cb2:	78bb      	ldrb	r3, [r7, #2]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_EP_Open+0xaa>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e00e      	b.n	8001cea <HAL_PCD_EP_Open+0xc8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fa6a 	bl	80041b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da0f      	bge.n	8001d26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	3338      	adds	r3, #56	; 0x38
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
 8001d24:	e00f      	b.n	8001d46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_PCD_EP_Close+0x6e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e00e      	b.n	8001d7e <HAL_PCD_EP_Close+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 faa8 	bl	80042c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	460b      	mov	r3, r1
 8001d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de2:	7afb      	ldrb	r3, [r7, #11]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	f002 fd87 	bl	800490c <USB_EP0StartXfer>
 8001dfe:	e008      	b.n	8001e12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	f002 fb35 	bl	800447c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3338      	adds	r3, #56	; 0x38
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f002 fd25 	bl	800490c <USB_EP0StartXfer>
 8001ec2:	e008      	b.n	8001ed6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	f002 fad3 	bl	800447c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d901      	bls.n	8001efe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e050      	b.n	8001fa0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0f      	bge.n	8001f26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3338      	adds	r3, #56	; 0x38
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00d      	b.n	8001f42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_EP_SetStall+0x82>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e01e      	b.n	8001fa0 <HAL_PCD_EP_SetStall+0xc0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 ff63 	bl	8004e3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f90:	461a      	mov	r2, r3
 8001f92:	f003 f953 	bl	800523c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e042      	b.n	800204c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0f      	bge.n	8001fee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3338      	adds	r3, #56	; 0x38
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	705a      	strb	r2, [r3, #1]
 8001fec:	e00f      	b.n	800200e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_EP_ClrStall+0x86>
 800202a:	2302      	movs	r3, #2
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_ClrStall+0xa4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 ff6b 	bl	8004f18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da0c      	bge.n	8002082 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3338      	adds	r3, #56	; 0x38
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e00c      	b.n	800209c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fd8a 	bl	8004bbc <USB_EPStopXfer>
 80020a8:	4603      	mov	r3, r0
 80020aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b08a      	sub	sp, #40	; 0x28
 80020ba:	af02      	add	r7, sp, #8
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3338      	adds	r3, #56	; 0x38
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	3304      	adds	r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d901      	bls.n	80020ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06c      	b.n	80021c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	429a      	cmp	r2, r3
 8002102:	d902      	bls.n	800210a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3303      	adds	r3, #3
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002112:	e02b      	b.n	800216c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	429a      	cmp	r2, r3
 8002128:	d902      	bls.n	8002130 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3303      	adds	r3, #3
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6919      	ldr	r1, [r3, #16]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002148:	b2db      	uxtb	r3, r3
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4603      	mov	r3, r0
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f002 fdde 	bl	8004d10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	441a      	add	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	441a      	add	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	b29b      	uxth	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	429a      	cmp	r2, r3
 8002180:	d809      	bhi.n	8002196 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800218a:	429a      	cmp	r2, r3
 800218c:	d203      	bcs.n	8002196 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1be      	bne.n	8002114 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d811      	bhi.n	80021c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	2201      	movs	r2, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c2:	4013      	ands	r3, r2
 80021c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	333c      	adds	r3, #60	; 0x3c
 80021e8:	3304      	adds	r3, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d17b      	bne.n	80022fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4a61      	ldr	r2, [pc, #388]	; (8002398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	f240 80b9 	bls.w	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80b3 	beq.w	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002232:	461a      	mov	r2, r3
 8002234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002238:	6093      	str	r3, [r2, #8]
 800223a:	e0a7      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	2320      	movs	r3, #32
 8002256:	6093      	str	r3, [r2, #8]
 8002258:	e098      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 8093 	bne.w	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d90f      	bls.n	800228e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e07e      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d114      	bne.n	80022f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	f002 ffae 	bl	800523c <USB_EP0_OutStart>
 80022e0:	e006      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	441a      	add	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f005 f9fa 	bl	80076f0 <HAL_PCD_DataOutStageCallback>
 80022fc:	e046      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d124      	bne.n	8002350 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	6093      	str	r3, [r2, #8]
 8002324:	e032      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	2320      	movs	r3, #32
 8002340:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 f9d1 	bl	80076f0 <HAL_PCD_DataOutStageCallback>
 800234e:	e01d      	b.n	800238c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d114      	bne.n	8002380 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002378:	461a      	mov	r2, r3
 800237a:	2100      	movs	r1, #0
 800237c:	f002 ff5e 	bl	800523c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f005 f9b2 	bl	80076f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	4f54300a 	.word	0x4f54300a
 800239c:	4f54310a 	.word	0x4f54310a

080023a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	333c      	adds	r3, #60	; 0x3c
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <PCD_EP_OutSetupPacket_int+0x88>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90e      	bls.n	80023f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f005 f969 	bl	80076cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <PCD_EP_OutSetupPacket_int+0x88>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d90c      	bls.n	800241c <PCD_EP_OutSetupPacket_int+0x7c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d108      	bne.n	800241c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002414:	461a      	mov	r2, r3
 8002416:	2101      	movs	r1, #1
 8002418:	f002 ff10 	bl	800523c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	4f54300a 	.word	0x4f54300a

0800242c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
 8002438:	4613      	mov	r3, r2
 800243a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800244a:	883b      	ldrh	r3, [r7, #0]
 800244c:	0419      	lsls	r1, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	430a      	orrs	r2, r1
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
 8002458:	e028      	b.n	80024ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e00d      	b.n	800248a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	3340      	adds	r3, #64	; 0x40
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4413      	add	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3301      	adds	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	3b01      	subs	r3, #1
 8002490:	429a      	cmp	r2, r3
 8002492:	d3ec      	bcc.n	800246e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002494:	883b      	ldrh	r3, [r7, #0]
 8002496:	0418      	lsls	r0, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	3b01      	subs	r3, #1
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	4302      	orrs	r2, r0
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e267      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d075      	beq.n	80025fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00c      	beq.n	8002538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d112      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002536:	d10b      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d05b      	beq.n	80025fc <HAL_RCC_OscConfig+0x108>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d157      	bne.n	80025fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e242      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x74>
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a75      	ldr	r2, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x98>
 8002572:	4b70      	ldr	r3, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6f      	ldr	r2, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fa46 	bl	8000a3c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fa42 	bl	8000a3c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e207      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fa32 	bl	8000a3c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fa2e 	bl	8000a3c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1f3      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0xe8>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1c7      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4937      	ldr	r1, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCC_OscConfig+0x244>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe f9e7 	bl	8000a3c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe f9e3 	bl	8000a3c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1a8      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4925      	ldr	r1, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x244>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe f9c6 	bl	8000a3c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe f9c2 	bl	8000a3c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e187      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d036      	beq.n	800274c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x248>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe f9a6 	bl	8000a3c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe f9a2 	bl	8000a3c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e167      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x200>
 8002712:	e01b      	b.n	800274c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_OscConfig+0x248>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271a:	f7fe f98f 	bl	8000a3c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	e00e      	b.n	8002740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002722:	f7fe f98b 	bl	8000a3c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d907      	bls.n	8002740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e150      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
 8002734:	40023800 	.word	0x40023800
 8002738:	42470000 	.word	0x42470000
 800273c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b88      	ldr	r3, [pc, #544]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ea      	bne.n	8002722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8097 	beq.w	8002888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b7d      	ldr	r3, [pc, #500]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a7c      	ldr	r2, [pc, #496]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b7a      	ldr	r3, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x474>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d118      	bne.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b74      	ldr	r3, [pc, #464]	; (8002968 <HAL_RCC_OscConfig+0x474>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a73      	ldr	r2, [pc, #460]	; (8002968 <HAL_RCC_OscConfig+0x474>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7fe f94b 	bl	8000a3c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe f947 	bl	8000a3c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e10c      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x474>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x2ea>
 80027d0:	4b64      	ldr	r3, [pc, #400]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a63      	ldr	r2, [pc, #396]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x30c>
 80027e6:	4b5f      	ldr	r3, [pc, #380]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5b      	ldr	r2, [pc, #364]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 8002800:	4b58      	ldr	r3, [pc, #352]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a57      	ldr	r2, [pc, #348]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4b55      	ldr	r3, [pc, #340]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a54      	ldr	r2, [pc, #336]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe f90c 	bl	8000a3c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe f908 	bl	8000a3c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0cb      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCC_OscConfig+0x334>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7fe f8f6 	bl	8000a3c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe f8f2 	bl	8000a3c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0b5      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a38      	ldr	r2, [pc, #224]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a1 	beq.w	80029d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002892:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d05c      	beq.n	8002958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d141      	bne.n	800292a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe f8c6 	bl	8000a3c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe f8c2 	bl	8000a3c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e087      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	491b      	ldr	r1, [pc, #108]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe f89b 	bl	8000a3c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe f897 	bl	8000a3c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e05c      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x416>
 8002928:	e054      	b.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_OscConfig+0x478>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe f884 	bl	8000a3c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe f880 	bl	8000a3c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e045      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_OscConfig+0x470>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x444>
 8002956:	e03d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e038      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
 800296c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x4ec>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d028      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d121      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d11a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d111      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0cc      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d90c      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d044      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e067      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fd ffb2 	bl	8000a3c <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fd ffae 	bl	8000a3c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e04f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d20c      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd ff12 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08007cf0 	.word	0x08007cf0
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b094      	sub	sp, #80	; 0x50
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	647b      	str	r3, [r7, #68]	; 0x44
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	f200 80e1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002be2:	e0db      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002be8:	e0db      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b73      	ldr	r3, [pc, #460]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bee:	e0d8      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	1a51      	subs	r1, r2, r1
 8002c3e:	6139      	str	r1, [r7, #16]
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c54:	4659      	mov	r1, fp
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5e:	4651      	mov	r1, sl
 8002c60:	018a      	lsls	r2, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ebb2 0801 	subs.w	r8, r2, r1
 8002c68:	4659      	mov	r1, fp
 8002c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb18 0303 	adds.w	r3, r8, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	eb49 0303 	adc.w	r3, r9, r3
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	024b      	lsls	r3, r1, #9
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cac:	4621      	mov	r1, r4
 8002cae:	024a      	lsls	r2, r1, #9
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cc0:	f7fd fa8a 	bl	80001d8 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ccc:	e058      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4611      	mov	r1, r2
 8002cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4641      	mov	r1, r8
 8002d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d20:	ebb2 040a 	subs.w	r4, r2, sl
 8002d24:	eb63 050b 	sbc.w	r5, r3, fp
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	00eb      	lsls	r3, r5, #3
 8002d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d36:	00e2      	lsls	r2, r4, #3
 8002d38:	4614      	mov	r4, r2
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	18e3      	adds	r3, r4, r3
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	464b      	mov	r3, r9
 8002d44:	eb45 0303 	adc.w	r3, r5, r3
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d56:	4629      	mov	r1, r5
 8002d58:	028b      	lsls	r3, r1, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d60:	4621      	mov	r1, r4
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d74:	f7fd fa30 	bl	80001d8 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3750      	adds	r7, #80	; 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fcf0 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fb1c 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e03c      	b.n	8002f06 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_TIM_Base_Start+0xa0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d013      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_TIM_Base_Start+0xa4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIM_Base_Start+0xa8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_TIM_Base_Start+0xac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIM_Base_Start+0x5c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIM_Base_Start+0xb0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e007      	b.n	8002f04 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000

08002f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f839 	bl	8002fc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fa72 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_TIM_PWM_Start+0x24>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e022      	b.n	8003046 <HAL_TIM_PWM_Start+0x6a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d109      	bne.n	800301a <HAL_TIM_PWM_Start+0x3e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e015      	b.n	8003046 <HAL_TIM_PWM_Start+0x6a>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d109      	bne.n	8003034 <HAL_TIM_PWM_Start+0x58>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e008      	b.n	8003046 <HAL_TIM_PWM_Start+0x6a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e068      	b.n	8003120 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0x82>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	e013      	b.n	8003086 <HAL_TIM_PWM_Start+0xaa>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0x92>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306c:	e00b      	b.n	8003086 <HAL_TIM_PWM_Start+0xaa>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0xa2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	e003      	b.n	8003086 <HAL_TIM_PWM_Start+0xaa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fc84 	bl	800399c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_TIM_PWM_Start+0x14c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d107      	bne.n	80030ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_TIM_PWM_Start+0x14c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_TIM_PWM_Start+0x10e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d013      	beq.n	80030ea <HAL_TIM_PWM_Start+0x10e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_TIM_PWM_Start+0x150>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIM_PWM_Start+0x10e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_TIM_PWM_Start+0x154>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_TIM_PWM_Start+0x10e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_TIM_PWM_Start+0x158>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIM_PWM_Start+0x10e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_TIM_PWM_Start+0x15c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d010      	beq.n	800311e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	e007      	b.n	800311e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40010000 	.word	0x40010000
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40014000 	.word	0x40014000

0800313c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e0ae      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	f200 809f 	bhi.w	80032a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080032a9 	.word	0x080032a9
 8003178:	080032a9 	.word	0x080032a9
 800317c:	080032a9 	.word	0x080032a9
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080032a9 	.word	0x080032a9
 8003188:	080032a9 	.word	0x080032a9
 800318c:	080032a9 	.word	0x080032a9
 8003190:	08003227 	.word	0x08003227
 8003194:	080032a9 	.word	0x080032a9
 8003198:	080032a9 	.word	0x080032a9
 800319c:	080032a9 	.word	0x080032a9
 80031a0:	08003267 	.word	0x08003267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f9d0 	bl	8003550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e064      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa16 	bl	800361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e043      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa61 	bl	80036f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e023      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 faab 	bl	80037c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x1c>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0b4      	b.n	8003446 <HAL_TIM_ConfigClockSource+0x186>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003314:	d03e      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0xd4>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	f200 8087 	bhi.w	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	f000 8086 	beq.w	8003432 <HAL_TIM_ConfigClockSource+0x172>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d87f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d01a      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xa6>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d87b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d050      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x11a>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d877      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d03c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xfa>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d873      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d058      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x13a>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d86f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d064      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d86b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d060      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d867      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	2b10      	cmp	r3, #16
 8003362:	d05a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	e062      	b.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 faf1 	bl	800395c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
      break;
 8003392:	e04f      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f000 fada 	bl	800395c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
      break;
 80033b8:	e03c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fa4e 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2150      	movs	r1, #80	; 0x50
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 faa7 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e02c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fa6d 	bl	80038c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2160      	movs	r1, #96	; 0x60
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa97 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e01c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa2e 	bl	8003868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa87 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003418:	e00c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 fa7e 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 800342a:	e003      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e000      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a34      	ldr	r2, [pc, #208]	; (8003534 <TIM_Base_SetConfig+0xe4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a31      	ldr	r2, [pc, #196]	; (8003538 <TIM_Base_SetConfig+0xe8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <TIM_Base_SetConfig+0xec>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <TIM_Base_SetConfig+0xf0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a25      	ldr	r2, [pc, #148]	; (8003534 <TIM_Base_SetConfig+0xe4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01b      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d017      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <TIM_Base_SetConfig+0xe8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a21      	ldr	r2, [pc, #132]	; (800353c <TIM_Base_SetConfig+0xec>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <TIM_Base_SetConfig+0xf0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <TIM_Base_SetConfig+0xf4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <TIM_Base_SetConfig+0xf8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <TIM_Base_SetConfig+0xfc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <TIM_Base_SetConfig+0xe4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	615a      	str	r2, [r3, #20]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 0302 	bic.w	r3, r3, #2
 8003598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <TIM_OC1_SetConfig+0xc8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10c      	bne.n	80035c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0308 	bic.w	r3, r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <TIM_OC1_SetConfig+0xc8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d111      	bne.n	80035f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	621a      	str	r2, [r3, #32]
}
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40010000 	.word	0x40010000

0800361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0210 	bic.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <TIM_OC2_SetConfig+0xd4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <TIM_OC2_SetConfig+0xd4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d113      	bne.n	80036c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000

080036f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800373c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_OC3_SetConfig+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10d      	bne.n	800376e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <TIM_OC3_SetConfig+0xd0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d113      	bne.n	800379e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40010000 	.word	0x40010000

080037c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	031b      	lsls	r3, r3, #12
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <TIM_OC4_SetConfig+0x9c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d109      	bne.n	800383c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 0201 	bic.w	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 030a 	bic.w	r3, r3, #10
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0210 	bic.w	r2, r3, #16
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	031b      	lsls	r3, r3, #12
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	431a      	orrs	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2201      	movs	r2, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	43db      	mvns	r3, r3
 80039be:	401a      	ands	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e050      	b.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d013      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10c      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40014000 	.word	0x40014000

08003ac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	f107 001c 	add.w	r0, r7, #28
 8003ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d122      	bne.n	8003b22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fbee 	bl	80052f8 <USB_CoreReset>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e01a      	b.n	8003b58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 fbe2 	bl	80052f8 <USB_CoreReset>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4a:	e005      	b.n	8003b58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10b      	bne.n	8003b76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f043 0206 	orr.w	r2, r3, #6
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b82:	b004      	add	sp, #16
 8003b84:	4770      	bx	lr
	...

08003b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d165      	bne.n	8003c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <USB_SetTurnaroundTime+0x11c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d906      	bls.n	8003bb2 <USB_SetTurnaroundTime+0x2a>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <USB_SetTurnaroundTime+0x120>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d202      	bcs.n	8003bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bac:	230f      	movs	r3, #15
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e062      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <USB_SetTurnaroundTime+0x120>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d306      	bcc.n	8003bc8 <USB_SetTurnaroundTime+0x40>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4a3b      	ldr	r2, [pc, #236]	; (8003cac <USB_SetTurnaroundTime+0x124>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d202      	bcs.n	8003bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bc2:	230e      	movs	r3, #14
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e057      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4a38      	ldr	r2, [pc, #224]	; (8003cac <USB_SetTurnaroundTime+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d306      	bcc.n	8003bde <USB_SetTurnaroundTime+0x56>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <USB_SetTurnaroundTime+0x128>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d202      	bcs.n	8003bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bd8:	230d      	movs	r3, #13
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e04c      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4a33      	ldr	r2, [pc, #204]	; (8003cb0 <USB_SetTurnaroundTime+0x128>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d306      	bcc.n	8003bf4 <USB_SetTurnaroundTime+0x6c>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4a32      	ldr	r2, [pc, #200]	; (8003cb4 <USB_SetTurnaroundTime+0x12c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d802      	bhi.n	8003bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bee:	230c      	movs	r3, #12
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e041      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <USB_SetTurnaroundTime+0x12c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d906      	bls.n	8003c0a <USB_SetTurnaroundTime+0x82>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <USB_SetTurnaroundTime+0x130>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d802      	bhi.n	8003c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c04:	230b      	movs	r3, #11
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e036      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <USB_SetTurnaroundTime+0x130>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d906      	bls.n	8003c20 <USB_SetTurnaroundTime+0x98>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <USB_SetTurnaroundTime+0x134>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d802      	bhi.n	8003c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e02b      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <USB_SetTurnaroundTime+0x134>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d906      	bls.n	8003c36 <USB_SetTurnaroundTime+0xae>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <USB_SetTurnaroundTime+0x138>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d202      	bcs.n	8003c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c30:	2309      	movs	r3, #9
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e020      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <USB_SetTurnaroundTime+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d306      	bcc.n	8003c4c <USB_SetTurnaroundTime+0xc4>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <USB_SetTurnaroundTime+0x13c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d802      	bhi.n	8003c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c46:	2308      	movs	r3, #8
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e015      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <USB_SetTurnaroundTime+0x13c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d906      	bls.n	8003c62 <USB_SetTurnaroundTime+0xda>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <USB_SetTurnaroundTime+0x140>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d202      	bcs.n	8003c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c5c:	2307      	movs	r3, #7
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e00a      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c62:	2306      	movs	r3, #6
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e007      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c6e:	2309      	movs	r3, #9
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e001      	b.n	8003c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c74:	2309      	movs	r3, #9
 8003c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	00d8acbf 	.word	0x00d8acbf
 8003ca8:	00e4e1c0 	.word	0x00e4e1c0
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	01067380 	.word	0x01067380
 8003cb4:	011a499f 	.word	0x011a499f
 8003cb8:	01312cff 	.word	0x01312cff
 8003cbc:	014ca43f 	.word	0x014ca43f
 8003cc0:	016e3600 	.word	0x016e3600
 8003cc4:	01a6ab1f 	.word	0x01a6ab1f
 8003cc8:	01e84800 	.word	0x01e84800

08003ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d115      	bne.n	8003d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7fc fe88 	bl	8000a54 <HAL_Delay>
      ms++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f001 fa45 	bl	80051da <USB_GetMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d01e      	beq.n	8003d94 <USB_SetCurrentMode+0x84>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b31      	cmp	r3, #49	; 0x31
 8003d5a:	d9f0      	bls.n	8003d3e <USB_SetCurrentMode+0x2e>
 8003d5c:	e01a      	b.n	8003d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d115      	bne.n	8003d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7fc fe6f 	bl	8000a54 <HAL_Delay>
      ms++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 fa2c 	bl	80051da <USB_GetMode>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <USB_SetCurrentMode+0x84>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b31      	cmp	r3, #49	; 0x31
 8003d8c:	d9f0      	bls.n	8003d70 <USB_SetCurrentMode+0x60>
 8003d8e:	e001      	b.n	8003d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e005      	b.n	8003da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b32      	cmp	r3, #50	; 0x32
 8003d98:	d101      	bne.n	8003d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da8:	b084      	sub	sp, #16
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e009      	b.n	8003ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3340      	adds	r3, #64	; 0x40
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b0e      	cmp	r3, #14
 8003de0:	d9f2      	bls.n	8003dc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11c      	bne.n	8003e22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df6:	f043 0302 	orr.w	r3, r3, #2
 8003dfa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e20:	e00b      	b.n	8003e3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e40:	461a      	mov	r2, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	461a      	mov	r2, r3
 8003e56:	680b      	ldr	r3, [r1, #0]
 8003e58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10c      	bne.n	8003e7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f965 	bl	8004138 <USB_SetDevSpeed>
 8003e6e:	e008      	b.n	8003e82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e70:	2101      	movs	r1, #1
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f960 	bl	8004138 <USB_SetDevSpeed>
 8003e78:	e003      	b.n	8003e82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f95b 	bl	8004138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e82:	2110      	movs	r1, #16
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8f3 	bl	8004070 <USB_FlushTxFifo>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f91f 	bl	80040d8 <USB_FlushRxFifo>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e043      	b.n	8003f56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee4:	d118      	bne.n	8003f18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e013      	b.n	8003f2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e008      	b.n	8003f2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	461a      	mov	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3301      	adds	r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3b7      	bcc.n	8003ece <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e043      	b.n	8003fec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f7a:	d118      	bne.n	8003fae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e013      	b.n	8003fc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e008      	b.n	8003fc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3b7      	bcc.n	8003f64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f043 0210 	orr.w	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <USB_DevInit+0x2c4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f043 0208 	orr.w	r2, r3, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004068:	b004      	add	sp, #16
 800406a:	4770      	bx	lr
 800406c:	803c3800 	.word	0x803c3800

08004070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <USB_FlushTxFifo+0x64>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e01b      	b.n	80040c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	daf2      	bge.n	800407e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	019b      	lsls	r3, r3, #6
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <USB_FlushTxFifo+0x64>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e006      	b.n	80040c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d0f0      	beq.n	80040a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	00030d40 	.word	0x00030d40

080040d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <USB_FlushRxFifo+0x5c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e018      	b.n	8004128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	daf2      	bge.n	80040e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2210      	movs	r2, #16
 8004106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <USB_FlushRxFifo+0x5c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e006      	b.n	8004128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d0f0      	beq.n	8004108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	00030d40 	.word	0x00030d40

08004138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
 800418e:	e00a      	b.n	80041a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d002      	beq.n	800419c <USB_GetDevSpeed+0x32>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d102      	bne.n	80041a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
 80041a0:	e001      	b.n	80041a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041a2:	230f      	movs	r3, #15
 80041a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d13a      	bne.n	8004246 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d155      	bne.n	80042b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	791b      	ldrb	r3, [r3, #4]
 8004222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800422c:	4313      	orrs	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e036      	b.n	80042b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004264:	4313      	orrs	r3, r2
 8004266:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11a      	bne.n	80042b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	791b      	ldrb	r3, [r3, #4]
 8004298:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800429a:	430b      	orrs	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d161      	bne.n	80043a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f6:	d11f      	bne.n	8004338 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004312:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004316:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004336:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004358:	4013      	ands	r3, r2
 800435a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	b29b      	uxth	r3, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4013      	ands	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	440b      	add	r3, r1
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	4619      	mov	r1, r3
 800439c:	4b35      	ldr	r3, [pc, #212]	; (8004474 <USB_DeactivateEndpoint+0x1b0>)
 800439e:	4013      	ands	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]
 80043a2:	e060      	b.n	8004466 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ba:	d11f      	bne.n	80043fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	43db      	mvns	r3, r3
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800441c:	4013      	ands	r3, r2
 800441e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	43db      	mvns	r3, r3
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004440:	4013      	ands	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0159      	lsls	r1, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	440b      	add	r3, r1
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	4619      	mov	r1, r3
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <USB_DeactivateEndpoint+0x1b4>)
 8004462:	4013      	ands	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	ec337800 	.word	0xec337800
 8004478:	eff37800 	.word	0xeff37800

0800447c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 815c 	bne.w	8004756 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d132      	bne.n	800450c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	0cdb      	lsrs	r3, r3, #19
 8004506:	04db      	lsls	r3, r3, #19
 8004508:	6113      	str	r3, [r2, #16]
 800450a:	e074      	b.n	80045f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	0cdb      	lsrs	r3, r3, #19
 8004528:	04db      	lsls	r3, r3, #19
 800452a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800454a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800454e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6999      	ldr	r1, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	440b      	add	r3, r1
 8004568:	1e59      	subs	r1, r3, #1
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004572:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004574:	4b9d      	ldr	r3, [pc, #628]	; (80047ec <USB_EPStartXfer+0x370>)
 8004576:	400b      	ands	r3, r1
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	0148      	lsls	r0, r1, #5
 800457c:	69f9      	ldr	r1, [r7, #28]
 800457e:	4401      	add	r1, r0
 8004580:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	0148      	lsls	r0, r1, #5
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	4401      	add	r1, r0
 80045a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d11f      	bne.n	80045f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	0151      	lsls	r1, r2, #5
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	440a      	add	r2, r1
 80045cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d14b      	bne.n	8004694 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d128      	bne.n	8004672 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d110      	bne.n	8004652 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e00f      	b.n	8004672 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e133      	b.n	80048fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d015      	beq.n	80046e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 811b 	beq.w	80048fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e2:	4313      	orrs	r3, r2
 80046e4:	634b      	str	r3, [r1, #52]	; 0x34
 80046e6:	e109      	b.n	80048fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e00f      	b.n	800473a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6919      	ldr	r1, [r3, #16]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	b298      	uxth	r0, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	4603      	mov	r3, r0
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fade 	bl	8004d10 <USB_WritePacket>
 8004754:	e0d2      	b.n	80048fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004770:	0cdb      	lsrs	r3, r3, #19
 8004772:	04db      	lsls	r3, r3, #19
 8004774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004798:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d126      	bne.n	80047f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	0148      	lsls	r0, r1, #5
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	4401      	add	r1, r0
 80047c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e6:	6113      	str	r3, [r2, #16]
 80047e8:	e03a      	b.n	8004860 <USB_EPStartXfer+0x3e4>
 80047ea:	bf00      	nop
 80047ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	1e5a      	subs	r2, r3, #1
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	8afa      	ldrh	r2, [r7, #22]
 800480c:	fb03 f202 	mul.w	r2, r3, r2
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	8afb      	ldrh	r3, [r7, #22]
 8004824:	04d9      	lsls	r1, r3, #19
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <USB_EPStartXfer+0x48c>)
 8004828:	400b      	ands	r3, r1
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	0148      	lsls	r0, r1, #5
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	4401      	add	r1, r0
 8004832:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	0148      	lsls	r0, r1, #5
 8004854:	69f9      	ldr	r1, [r7, #28]
 8004856:	4401      	add	r1, r0
 8004858:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800485c:	4313      	orrs	r3, r2
 800485e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	460a      	mov	r2, r1
 8004880:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	791b      	ldrb	r3, [r3, #4]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d128      	bne.n	80048dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d110      	bne.n	80048bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e00f      	b.n	80048dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	1ff80000 	.word	0x1ff80000

0800490c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b01      	cmp	r3, #1
 800492a:	f040 80ce 	bne.w	8004aca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d132      	bne.n	800499c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004994:	0cdb      	lsrs	r3, r3, #19
 8004996:	04db      	lsls	r3, r3, #19
 8004998:	6113      	str	r3, [r2, #16]
 800499a:	e04e      	b.n	8004a3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	0cdb      	lsrs	r3, r3, #19
 80049b8:	04db      	lsls	r3, r3, #19
 80049ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d903      	bls.n	80049f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2a:	6939      	ldr	r1, [r7, #16]
 8004a2c:	0148      	lsls	r0, r1, #5
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	4401      	add	r1, r0
 8004a32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d11e      	bne.n	8004a7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e097      	b.n	8004bae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8083 	beq.w	8004bae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	634b      	str	r3, [r1, #52]	; 0x34
 8004ac8:	e071      	b.n	8004bae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae4:	0cdb      	lsrs	r3, r3, #19
 8004ae6:	04db      	lsls	r3, r3, #19
 8004ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	6939      	ldr	r1, [r7, #16]
 8004b5e:	0148      	lsls	r0, r1, #5
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	4401      	add	r1, r0
 8004b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10d      	bne.n	8004b8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d14a      	bne.n	8004c70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf2:	f040 8086 	bne.w	8004d02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	7812      	ldrb	r2, [r2, #0]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d902      	bls.n	8004c54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
          break;
 8004c52:	e056      	b.n	8004d02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c6c:	d0e7      	beq.n	8004c3e <USB_EPStopXfer+0x82>
 8004c6e:	e048      	b.n	8004d02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c88:	d13b      	bne.n	8004d02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d902      	bls.n	8004ce8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ce6:	e00c      	b.n	8004d02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d00:	d0e7      	beq.n	8004cd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	460b      	mov	r3, r1
 8004d20:	71fb      	strb	r3, [r7, #7]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d123      	bne.n	8004d7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d36:	88bb      	ldrh	r3, [r7, #4]
 8004d38:	3303      	adds	r3, #3
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e018      	b.n	8004d76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	031a      	lsls	r2, r3, #12
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	461a      	mov	r2, r3
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d3e2      	bcc.n	8004d44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3724      	adds	r7, #36	; 0x24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b08b      	sub	sp, #44	; 0x2c
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	623b      	str	r3, [r7, #32]
 8004db6:	e014      	b.n	8004de2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	3301      	adds	r3, #1
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	3301      	adds	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	3301      	adds	r3, #1
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	6a3a      	ldr	r2, [r7, #32]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3e6      	bcc.n	8004db8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dea:	8bfb      	ldrh	r3, [r7, #30]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01e      	beq.n	8004e2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	701a      	strb	r2, [r3, #0]
      i++;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	3301      	adds	r3, #1
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e22:	8bfb      	ldrh	r3, [r7, #30]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e28:	8bfb      	ldrh	r3, [r7, #30]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ea      	bne.n	8004e04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	372c      	adds	r7, #44	; 0x2c
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d12c      	bne.n	8004eb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	db12      	blt.n	8004e90 <USB_EPSetStall+0x54>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00f      	beq.n	8004e90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e02b      	b.n	8004f0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	db12      	blt.n	8004eea <USB_EPSetStall+0xae>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00f      	beq.n	8004eea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ee8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d128      	bne.n	8004f86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d003      	beq.n	8004f64 <USB_EPClearStall+0x4c>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	791b      	ldrb	r3, [r3, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d138      	bne.n	8004fd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e027      	b.n	8004fd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	791b      	ldrb	r3, [r3, #4]
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d003      	beq.n	8004fb6 <USB_EPClearStall+0x9e>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	791b      	ldrb	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d10f      	bne.n	8004fd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005006:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505e:	f023 0302 	bic.w	r3, r3, #2
 8005062:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800508c:	f023 0303 	bic.w	r3, r3, #3
 8005090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a0:	f043 0302 	orr.w	r3, r3, #2
 80050a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	0c1b      	lsrs	r3, r3, #16
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	b29b      	uxth	r3, r3
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005170:	68bb      	ldr	r3, [r7, #8]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800517e:	b480      	push	{r7}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	01db      	lsls	r3, r3, #7
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051cc:	68bb      	ldr	r3, [r7, #8]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0301 	and.w	r3, r3, #1
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	460b      	mov	r3, r1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	333c      	adds	r3, #60	; 0x3c
 8005252:	3304      	adds	r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <USB_EP0_OutStart+0xb8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d90a      	bls.n	8005276 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005270:	d101      	bne.n	8005276 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e037      	b.n	80052e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	2300      	movs	r3, #0
 8005280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a4:	f043 0318 	orr.w	r3, r3, #24
 80052a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052be:	7afb      	ldrb	r3, [r7, #11]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10f      	bne.n	80052e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	4f54300a 	.word	0x4f54300a

080052f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a13      	ldr	r2, [pc, #76]	; (800535c <USB_CoreReset+0x64>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e01b      	b.n	800534e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	daf2      	bge.n	8005304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <USB_CoreReset+0x64>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d0f0      	beq.n	800532e <USB_CoreReset+0x36>

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	00030d40 	.word	0x00030d40

08005360 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800536c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005370:	f002 fc1e 	bl	8007bb0 <USBD_static_malloc>
 8005374:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	32b0      	adds	r2, #176	; 0xb0
 8005386:	2100      	movs	r1, #0
 8005388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800538c:	2302      	movs	r3, #2
 800538e:	e0d4      	b.n	800553a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005390:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005394:	2100      	movs	r1, #0
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f002 fc72 	bl	8007c80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	; 0xb0
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	32b0      	adds	r2, #176	; 0xb0
 80053b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7c1b      	ldrb	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d138      	bne.n	800543a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053c8:	4b5e      	ldr	r3, [pc, #376]	; (8005544 <USBD_CDC_Init+0x1e4>)
 80053ca:	7819      	ldrb	r1, [r3, #0]
 80053cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d0:	2202      	movs	r2, #2
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 fac9 	bl	800796a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053d8:	4b5a      	ldr	r3, [pc, #360]	; (8005544 <USBD_CDC_Init+0x1e4>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	2201      	movs	r2, #1
 80053f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053f2:	4b55      	ldr	r3, [pc, #340]	; (8005548 <USBD_CDC_Init+0x1e8>)
 80053f4:	7819      	ldrb	r1, [r3, #0]
 80053f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053fa:	2202      	movs	r2, #2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f002 fab4 	bl	800796a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <USBD_CDC_Init+0x1e8>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800541a:	2201      	movs	r2, #1
 800541c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800541e:	4b4b      	ldr	r3, [pc, #300]	; (800554c <USBD_CDC_Init+0x1ec>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	3326      	adds	r3, #38	; 0x26
 8005434:	2210      	movs	r2, #16
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e035      	b.n	80054a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800543a:	4b42      	ldr	r3, [pc, #264]	; (8005544 <USBD_CDC_Init+0x1e4>)
 800543c:	7819      	ldrb	r1, [r3, #0]
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	2202      	movs	r2, #2
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 fa91 	bl	800796a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005448:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <USBD_CDC_Init+0x1e4>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3324      	adds	r3, #36	; 0x24
 800545e:	2201      	movs	r2, #1
 8005460:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <USBD_CDC_Init+0x1e8>)
 8005464:	7819      	ldrb	r1, [r3, #0]
 8005466:	2340      	movs	r3, #64	; 0x40
 8005468:	2202      	movs	r2, #2
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f002 fa7d 	bl	800796a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005470:	4b35      	ldr	r3, [pc, #212]	; (8005548 <USBD_CDC_Init+0x1e8>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005488:	2201      	movs	r2, #1
 800548a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800548c:	4b2f      	ldr	r3, [pc, #188]	; (800554c <USBD_CDC_Init+0x1ec>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	f003 020f 	and.w	r2, r3, #15
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3326      	adds	r3, #38	; 0x26
 80054a2:	2210      	movs	r2, #16
 80054a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054a6:	4b29      	ldr	r3, [pc, #164]	; (800554c <USBD_CDC_Init+0x1ec>)
 80054a8:	7819      	ldrb	r1, [r3, #0]
 80054aa:	2308      	movs	r3, #8
 80054ac:	2203      	movs	r2, #3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f002 fa5b 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <USBD_CDC_Init+0x1ec>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3324      	adds	r3, #36	; 0x24
 80054ca:	2201      	movs	r2, #1
 80054cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	33b0      	adds	r3, #176	; 0xb0
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005504:	2302      	movs	r3, #2
 8005506:	e018      	b.n	800553a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7c1b      	ldrb	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <USBD_CDC_Init+0x1e8>)
 8005512:	7819      	ldrb	r1, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800551a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 fb12 	bl	8007b48 <USBD_LL_PrepareReceive>
 8005524:	e008      	b.n	8005538 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <USBD_CDC_Init+0x1e8>)
 8005528:	7819      	ldrb	r1, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f002 fb08 	bl	8007b48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000093 	.word	0x20000093
 8005548:	20000094 	.word	0x20000094
 800554c:	20000095 	.word	0x20000095

08005550 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <USBD_CDC_DeInit+0xf8>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fa27 	bl	80079b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005568:	4b37      	ldr	r3, [pc, #220]	; (8005648 <USBD_CDC_DeInit+0xf8>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	2200      	movs	r2, #0
 8005580:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005582:	4b32      	ldr	r3, [pc, #200]	; (800564c <USBD_CDC_DeInit+0xfc>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f002 fa14 	bl	80079b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800558e:	4b2f      	ldr	r3, [pc, #188]	; (800564c <USBD_CDC_DeInit+0xfc>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f003 020f 	and.w	r2, r3, #15
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055a6:	2200      	movs	r2, #0
 80055a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055aa:	4b29      	ldr	r3, [pc, #164]	; (8005650 <USBD_CDC_DeInit+0x100>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fa00 	bl	80079b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <USBD_CDC_DeInit+0x100>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	2200      	movs	r2, #0
 80055ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <USBD_CDC_DeInit+0x100>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 020f 	and.w	r2, r3, #15
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3326      	adds	r3, #38	; 0x26
 80055e6:	2200      	movs	r2, #0
 80055e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	32b0      	adds	r2, #176	; 0xb0
 80055f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01f      	beq.n	800563c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	33b0      	adds	r3, #176	; 0xb0
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	32b0      	adds	r2, #176	; 0xb0
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	4618      	mov	r0, r3
 8005620:	f002 fad4 	bl	8007bcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	32b0      	adds	r2, #176	; 0xb0
 800562e:	2100      	movs	r1, #0
 8005630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000093 	.word	0x20000093
 800564c:	20000094 	.word	0x20000094
 8005650:	20000095 	.word	0x20000095

08005654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	32b0      	adds	r2, #176	; 0xb0
 8005668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005680:	2303      	movs	r3, #3
 8005682:	e0bf      	b.n	8005804 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800568c:	2b00      	cmp	r3, #0
 800568e:	d050      	beq.n	8005732 <USBD_CDC_Setup+0xde>
 8005690:	2b20      	cmp	r3, #32
 8005692:	f040 80af 	bne.w	80057f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	88db      	ldrh	r3, [r3, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03a      	beq.n	8005714 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da1b      	bge.n	80056e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	33b0      	adds	r3, #176	; 0xb0
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	88d2      	ldrh	r2, [r2, #6]
 80056c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	bf28      	it	cs
 80056ce:	2307      	movcs	r3, #7
 80056d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	89fa      	ldrh	r2, [r7, #14]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fd43 	bl	8007164 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80056de:	e090      	b.n	8005802 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	785a      	ldrb	r2, [r3, #1]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	88db      	ldrh	r3, [r3, #6]
 80056ee:	2b3f      	cmp	r3, #63	; 0x3f
 80056f0:	d803      	bhi.n	80056fa <USBD_CDC_Setup+0xa6>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	88db      	ldrh	r3, [r3, #6]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	e000      	b.n	80056fc <USBD_CDC_Setup+0xa8>
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005702:	6939      	ldr	r1, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800570a:	461a      	mov	r2, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fd55 	bl	80071bc <USBD_CtlPrepareRx>
      break;
 8005712:	e076      	b.n	8005802 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	33b0      	adds	r3, #176	; 0xb0
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	7850      	ldrb	r0, [r2, #1]
 800572a:	2200      	movs	r2, #0
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	4798      	blx	r3
      break;
 8005730:	e067      	b.n	8005802 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b0b      	cmp	r3, #11
 8005738:	d851      	bhi.n	80057de <USBD_CDC_Setup+0x18a>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <USBD_CDC_Setup+0xec>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005771 	.word	0x08005771
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057df 	.word	0x080057df
 800574c:	080057df 	.word	0x080057df
 8005750:	080057df 	.word	0x080057df
 8005754:	080057df 	.word	0x080057df
 8005758:	080057df 	.word	0x080057df
 800575c:	080057df 	.word	0x080057df
 8005760:	080057df 	.word	0x080057df
 8005764:	080057df 	.word	0x080057df
 8005768:	0800579b 	.word	0x0800579b
 800576c:	080057c5 	.word	0x080057c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b03      	cmp	r3, #3
 800577a:	d107      	bne.n	800578c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800577c:	f107 030a 	add.w	r3, r7, #10
 8005780:	2202      	movs	r2, #2
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fced 	bl	8007164 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800578a:	e032      	b.n	80057f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fc77 	bl	8007082 <USBD_CtlError>
            ret = USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	75fb      	strb	r3, [r7, #23]
          break;
 8005798:	e02b      	b.n	80057f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d107      	bne.n	80057b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057a6:	f107 030d 	add.w	r3, r7, #13
 80057aa:	2201      	movs	r2, #1
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fcd8 	bl	8007164 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057b4:	e01d      	b.n	80057f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fc62 	bl	8007082 <USBD_CtlError>
            ret = USBD_FAIL;
 80057be:	2303      	movs	r3, #3
 80057c0:	75fb      	strb	r3, [r7, #23]
          break;
 80057c2:	e016      	b.n	80057f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d00f      	beq.n	80057f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 fc55 	bl	8007082 <USBD_CtlError>
            ret = USBD_FAIL;
 80057d8:	2303      	movs	r3, #3
 80057da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057dc:	e008      	b.n	80057f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fc4e 	bl	8007082 <USBD_CtlError>
          ret = USBD_FAIL;
 80057e6:	2303      	movs	r3, #3
 80057e8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ea:	e002      	b.n	80057f2 <USBD_CDC_Setup+0x19e>
          break;
 80057ec:	bf00      	nop
 80057ee:	e008      	b.n	8005802 <USBD_CDC_Setup+0x1ae>
          break;
 80057f0:	bf00      	nop
      }
      break;
 80057f2:	e006      	b.n	8005802 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fc43 	bl	8007082 <USBD_CtlError>
      ret = USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	bf00      	nop
  }

  return (uint8_t)ret;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800581e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32b0      	adds	r2, #176	; 0xb0
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005832:	2303      	movs	r3, #3
 8005834:	e065      	b.n	8005902 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	32b0      	adds	r2, #176	; 0xb0
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	3318      	adds	r3, #24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02f      	beq.n	80058c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	3318      	adds	r3, #24
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	f003 010f 	and.w	r1, r3, #15
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	460b      	mov	r3, r1
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4403      	add	r3, r0
 8005888:	3348      	adds	r3, #72	; 0x48
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005896:	2b00      	cmp	r3, #0
 8005898:	d112      	bne.n	80058c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	3318      	adds	r3, #24
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058b2:	78f9      	ldrb	r1, [r7, #3]
 80058b4:	2300      	movs	r3, #0
 80058b6:	2200      	movs	r2, #0
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f002 f924 	bl	8007b06 <USBD_LL_Transmit>
 80058be:	e01f      	b.n	8005900 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	33b0      	adds	r3, #176	; 0xb0
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d010      	beq.n	8005900 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	33b0      	adds	r3, #176	; 0xb0
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	32b0      	adds	r2, #176	; 0xb0
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	32b0      	adds	r2, #176	; 0xb0
 8005930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005938:	2303      	movs	r3, #3
 800593a:	e01a      	b.n	8005972 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f002 f922 	bl	8007b8a <USBD_LL_GetRxDataSize>
 8005946:	4602      	mov	r2, r0
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	33b0      	adds	r3, #176	; 0xb0
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800596c:	4611      	mov	r1, r2
 800596e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	32b0      	adds	r2, #176	; 0xb0
 800598c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005990:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	e025      	b.n	80059e8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	33b0      	adds	r3, #176	; 0xb0
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01a      	beq.n	80059e6 <USBD_CDC_EP0_RxReady+0x6c>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059b6:	2bff      	cmp	r3, #255	; 0xff
 80059b8:	d015      	beq.n	80059e6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	33b0      	adds	r3, #176	; 0xb0
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80059d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059da:	b292      	uxth	r2, r2
 80059dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	22ff      	movs	r2, #255	; 0xff
 80059e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059f8:	2182      	movs	r1, #130	; 0x82
 80059fa:	4818      	ldr	r0, [pc, #96]	; (8005a5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059fc:	f000 fd09 	bl	8006412 <USBD_GetEpDesc>
 8005a00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a02:	2101      	movs	r1, #1
 8005a04:	4815      	ldr	r0, [pc, #84]	; (8005a5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a06:	f000 fd04 	bl	8006412 <USBD_GetEpDesc>
 8005a0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a0c:	2181      	movs	r1, #129	; 0x81
 8005a0e:	4813      	ldr	r0, [pc, #76]	; (8005a5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a10:	f000 fcff 	bl	8006412 <USBD_GetEpDesc>
 8005a14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d006      	beq.n	8005a36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a30:	711a      	strb	r2, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a44:	711a      	strb	r2, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2243      	movs	r2, #67	; 0x43
 8005a4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000050 	.word	0x20000050

08005a60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a68:	2182      	movs	r1, #130	; 0x82
 8005a6a:	4818      	ldr	r0, [pc, #96]	; (8005acc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a6c:	f000 fcd1 	bl	8006412 <USBD_GetEpDesc>
 8005a70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a72:	2101      	movs	r1, #1
 8005a74:	4815      	ldr	r0, [pc, #84]	; (8005acc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a76:	f000 fccc 	bl	8006412 <USBD_GetEpDesc>
 8005a7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	4813      	ldr	r0, [pc, #76]	; (8005acc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a80:	f000 fcc7 	bl	8006412 <USBD_GetEpDesc>
 8005a84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d006      	beq.n	8005aa6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	711a      	strb	r2, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f042 0202 	orr.w	r2, r2, #2
 8005aa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d006      	beq.n	8005aba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	711a      	strb	r2, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f042 0202 	orr.w	r2, r2, #2
 8005ab8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2243      	movs	r2, #67	; 0x43
 8005abe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000050 	.word	0x20000050

08005ad0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ad8:	2182      	movs	r1, #130	; 0x82
 8005ada:	4818      	ldr	r0, [pc, #96]	; (8005b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005adc:	f000 fc99 	bl	8006412 <USBD_GetEpDesc>
 8005ae0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4815      	ldr	r0, [pc, #84]	; (8005b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ae6:	f000 fc94 	bl	8006412 <USBD_GetEpDesc>
 8005aea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005aec:	2181      	movs	r1, #129	; 0x81
 8005aee:	4813      	ldr	r0, [pc, #76]	; (8005b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005af0:	f000 fc8f 	bl	8006412 <USBD_GetEpDesc>
 8005af4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2210      	movs	r2, #16
 8005b00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b10:	711a      	strb	r2, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b24:	711a      	strb	r2, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2243      	movs	r2, #67	; 0x43
 8005b2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000050 	.word	0x20000050

08005b40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b4e:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	2000000c 	.word	0x2000000c

08005b60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e009      	b.n	8005b88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	33b0      	adds	r3, #176	; 0xb0
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	32b0      	adds	r2, #176	; 0xb0
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e008      	b.n	8005bcc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	32b0      	adds	r2, #176	; 0xb0
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e004      	b.n	8005c06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
	...

08005c14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32b0      	adds	r2, #176	; 0xb0
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	32b0      	adds	r2, #176	; 0xb0
 8005c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e018      	b.n	8005c74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7c1b      	ldrb	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <USBD_CDC_ReceivePacket+0x68>)
 8005c4c:	7819      	ldrb	r1, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 ff75 	bl	8007b48 <USBD_LL_PrepareReceive>
 8005c5e:	e008      	b.n	8005c72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <USBD_CDC_ReceivePacket+0x68>)
 8005c62:	7819      	ldrb	r1, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 ff6b 	bl	8007b48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000094 	.word	0x20000094

08005c80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e01f      	b.n	8005cd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	79fa      	ldrb	r2, [r7, #7]
 8005cca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f001 fde5 	bl	800789c <USBD_LL_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e025      	b.n	8005d44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32ae      	adds	r2, #174	; 0xae
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00f      	beq.n	8005d34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	32ae      	adds	r2, #174	; 0xae
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	f107 020e 	add.w	r2, r7, #14
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fded 	bl	8007934 <USBD_LL_Start>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f908 	bl	800700e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d01a      	beq.n	8005e58 <USBD_LL_SetupStage+0x72>
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d822      	bhi.n	8005e6c <USBD_LL_SetupStage+0x86>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <USBD_LL_SetupStage+0x4a>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d00a      	beq.n	8005e44 <USBD_LL_SetupStage+0x5e>
 8005e2e:	e01d      	b.n	8005e6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb5f 	bl	80064fc <USBD_StdDevReq>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e020      	b.n	8005e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fbc7 	bl	80065e0 <USBD_StdItfReq>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	e016      	b.n	8005e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc29 	bl	80066b8 <USBD_StdEPReq>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6a:	e00c      	b.n	8005e86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fdba 	bl	80079f4 <USBD_LL_StallEP>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
      break;
 8005e84:	bf00      	nop
  }

  return ret;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d16e      	bne.n	8005f86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	f040 8098 	bne.w	8005fec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d913      	bls.n	8005ef0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bf28      	it	cs
 8005ee2:	4613      	movcs	r3, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f001 f984 	bl	80071f6 <USBD_CtlContinueRx>
 8005eee:	e07d      	b.n	8005fec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d014      	beq.n	8005f28 <USBD_LL_DataOutStage+0x98>
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d81d      	bhi.n	8005f3e <USBD_LL_DataOutStage+0xae>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <USBD_LL_DataOutStage+0x7c>
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d003      	beq.n	8005f12 <USBD_LL_DataOutStage+0x82>
 8005f0a:	e018      	b.n	8005f3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005f10:	e018      	b.n	8005f44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fa5e 	bl	80063de <USBD_CoreFindIF>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75bb      	strb	r3, [r7, #22]
            break;
 8005f26:	e00d      	b.n	8005f44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	4619      	mov	r1, r3
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fa60 	bl	80063f8 <USBD_CoreFindEP>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8005f3c:	e002      	b.n	8005f44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	75bb      	strb	r3, [r7, #22]
            break;
 8005f42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d119      	bne.n	8005f7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d113      	bne.n	8005f7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f56:	7dba      	ldrb	r2, [r7, #22]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	32ae      	adds	r2, #174	; 0xae
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f66:	7dba      	ldrb	r2, [r7, #22]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f6e:	7dba      	ldrb	r2, [r7, #22]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	32ae      	adds	r2, #174	; 0xae
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f001 f94a 	bl	8007218 <USBD_CtlSendStatus>
 8005f84:	e032      	b.n	8005fec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa31 	bl	80063f8 <USBD_CoreFindEP>
 8005f96:	4603      	mov	r3, r0
 8005f98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f9a:	7dbb      	ldrb	r3, [r7, #22]
 8005f9c:	2bff      	cmp	r3, #255	; 0xff
 8005f9e:	d025      	beq.n	8005fec <USBD_LL_DataOutStage+0x15c>
 8005fa0:	7dbb      	ldrb	r3, [r7, #22]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d122      	bne.n	8005fec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d117      	bne.n	8005fe2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005fb2:	7dba      	ldrb	r2, [r7, #22]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	32ae      	adds	r2, #174	; 0xae
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00f      	beq.n	8005fe2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fc2:	7dba      	ldrb	r2, [r7, #22]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fca:	7dba      	ldrb	r2, [r7, #22]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	32ae      	adds	r2, #174	; 0xae
 8005fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	7afa      	ldrb	r2, [r7, #11]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	e000      	b.n	8005fee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	460b      	mov	r3, r1
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d16f      	bne.n	80060ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3314      	adds	r3, #20
 800600e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006016:	2b02      	cmp	r3, #2
 8006018:	d15a      	bne.n	80060d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	429a      	cmp	r2, r3
 8006024:	d914      	bls.n	8006050 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	461a      	mov	r2, r3
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f001 f8ac 	bl	800719a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006042:	2300      	movs	r3, #0
 8006044:	2200      	movs	r2, #0
 8006046:	2100      	movs	r1, #0
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 fd7d 	bl	8007b48 <USBD_LL_PrepareReceive>
 800604e:	e03f      	b.n	80060d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d11c      	bne.n	8006096 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006064:	429a      	cmp	r2, r3
 8006066:	d316      	bcc.n	8006096 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d20f      	bcs.n	8006096 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006076:	2200      	movs	r2, #0
 8006078:	2100      	movs	r1, #0
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f001 f88d 	bl	800719a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006088:	2300      	movs	r3, #0
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f001 fd5a 	bl	8007b48 <USBD_LL_PrepareReceive>
 8006094:	e01c      	b.n	80060d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d10f      	bne.n	80060c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 fc95 	bl	80079f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 f8b7 	bl	800723e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03a      	beq.n	8006150 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fe42 	bl	8005d64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060e8:	e032      	b.n	8006150 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f97f 	bl	80063f8 <USBD_CoreFindEP>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2bff      	cmp	r3, #255	; 0xff
 8006102:	d025      	beq.n	8006150 <USBD_LL_DataInStage+0x15a>
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d122      	bne.n	8006150 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d11c      	bne.n	8006150 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006116:	7dfa      	ldrb	r2, [r7, #23]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	32ae      	adds	r2, #174	; 0xae
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006126:	7dfa      	ldrb	r2, [r7, #23]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800612e:	7dfa      	ldrb	r2, [r7, #23]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	32ae      	adds	r2, #174	; 0xae
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	7afa      	ldrb	r2, [r7, #11]
 800613c:	4611      	mov	r1, r2
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	4798      	blx	r3
 8006142:	4603      	mov	r3, r0
 8006144:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006146:	7dbb      	ldrb	r3, [r7, #22]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800614c:	7dbb      	ldrb	r3, [r7, #22]
 800614e:	e000      	b.n	8006152 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d014      	beq.n	80061c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6852      	ldr	r2, [r2, #4]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	4611      	mov	r1, r2
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	2200      	movs	r2, #0
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fbcf 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2240      	movs	r2, #64	; 0x40
 80061d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	2200      	movs	r2, #0
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fbc1 	bl	800796a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	621a      	str	r2, [r3, #32]

  return ret;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622c:	b2da      	uxtb	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2204      	movs	r2, #4
 8006238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b04      	cmp	r3, #4
 800625c:	d106      	bne.n	800626c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006264:	b2da      	uxtb	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d110      	bne.n	80062b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	32ae      	adds	r2, #174	; 0xae
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	e01c      	b.n	8006316 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d115      	bne.n	8006314 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	; 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	32ae      	adds	r2, #174	; 0xae
 8006306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4611      	mov	r1, r2
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	32ae      	adds	r2, #174	; 0xae
 8006334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	e01c      	b.n	800637a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b03      	cmp	r3, #3
 800634a:	d115      	bne.n	8006378 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32ae      	adds	r2, #174	; 0xae
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32ae      	adds	r2, #174	; 0xae
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6852      	ldr	r2, [r2, #4]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	4611      	mov	r1, r2
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006404:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	885b      	ldrh	r3, [r3, #2]
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	429a      	cmp	r2, r3
 8006438:	d920      	bls.n	800647c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006442:	e013      	b.n	800646c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006444:	f107 030a 	add.w	r3, r7, #10
 8006448:	4619      	mov	r1, r3
 800644a:	6978      	ldr	r0, [r7, #20]
 800644c:	f000 f81b 	bl	8006486 <USBD_GetNextDesc>
 8006450:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	2b05      	cmp	r3, #5
 8006458:	d108      	bne.n	800646c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	429a      	cmp	r2, r3
 8006466:	d008      	beq.n	800647a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	b29a      	uxth	r2, r3
 8006472:	897b      	ldrh	r3, [r7, #10]
 8006474:	429a      	cmp	r2, r3
 8006476:	d8e5      	bhi.n	8006444 <USBD_GetEpDesc+0x32>
 8006478:	e000      	b.n	800647c <USBD_GetEpDesc+0x6a>
          break;
 800647a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800647c:	693b      	ldr	r3, [r7, #16]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	4413      	add	r3, r2
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3301      	adds	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064de:	8a3b      	ldrh	r3, [r7, #16]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064ee:	89fb      	ldrh	r3, [r7, #14]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d005      	beq.n	8006522 <USBD_StdDevReq+0x26>
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d857      	bhi.n	80065ca <USBD_StdDevReq+0xce>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00f      	beq.n	800653e <USBD_StdDevReq+0x42>
 800651e:	2b20      	cmp	r3, #32
 8006520:	d153      	bne.n	80065ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	32ae      	adds	r2, #174	; 0xae
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
      break;
 800653c:	e04a      	b.n	80065d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b09      	cmp	r3, #9
 8006544:	d83b      	bhi.n	80065be <USBD_StdDevReq+0xc2>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <USBD_StdDevReq+0x50>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065bf 	.word	0x080065bf
 8006558:	080065ab 	.word	0x080065ab
 800655c:	080065bf 	.word	0x080065bf
 8006560:	0800657f 	.word	0x0800657f
 8006564:	08006575 	.word	0x08006575
 8006568:	080065bf 	.word	0x080065bf
 800656c:	08006597 	.word	0x08006597
 8006570:	08006589 	.word	0x08006589
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa3c 	bl	80069f4 <USBD_GetDescriptor>
          break;
 800657c:	e024      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fba1 	bl	8006cc8 <USBD_SetAddress>
          break;
 8006586:	e01f      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fbe0 	bl	8006d50 <USBD_SetConfig>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
          break;
 8006594:	e018      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc83 	bl	8006ea4 <USBD_GetConfig>
          break;
 800659e:	e013      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fcb4 	bl	8006f10 <USBD_GetStatus>
          break;
 80065a8:	e00e      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fce3 	bl	8006f78 <USBD_SetFeature>
          break;
 80065b2:	e009      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fd07 	bl	8006fca <USBD_ClrFeature>
          break;
 80065bc:	e004      	b.n	80065c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fd5e 	bl	8007082 <USBD_CtlError>
          break;
 80065c6:	bf00      	nop
      }
      break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd58 	bl	8007082 <USBD_CtlError>
      break;
 80065d2:	bf00      	nop
  }

  return ret;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d005      	beq.n	8006606 <USBD_StdItfReq+0x26>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d852      	bhi.n	80066a4 <USBD_StdItfReq+0xc4>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <USBD_StdItfReq+0x26>
 8006602:	2b20      	cmp	r3, #32
 8006604:	d14e      	bne.n	80066a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	2b02      	cmp	r3, #2
 8006612:	d840      	bhi.n	8006696 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	889b      	ldrh	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d836      	bhi.n	800668c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	889b      	ldrh	r3, [r3, #4]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fed9 	bl	80063de <USBD_CoreFindIF>
 800662c:	4603      	mov	r3, r0
 800662e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2bff      	cmp	r3, #255	; 0xff
 8006634:	d01d      	beq.n	8006672 <USBD_StdItfReq+0x92>
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11a      	bne.n	8006672 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800663c:	7bba      	ldrb	r2, [r7, #14]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32ae      	adds	r2, #174	; 0xae
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00f      	beq.n	800666c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800664c:	7bba      	ldrb	r2, [r7, #14]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006654:	7bba      	ldrb	r2, [r7, #14]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	32ae      	adds	r2, #174	; 0xae
 800665a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800666a:	e004      	b.n	8006676 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006670:	e001      	b.n	8006676 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	88db      	ldrh	r3, [r3, #6]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d110      	bne.n	80066a0 <USBD_StdItfReq+0xc0>
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10d      	bne.n	80066a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fdc7 	bl	8007218 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800668a:	e009      	b.n	80066a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fcf7 	bl	8007082 <USBD_CtlError>
          break;
 8006694:	e004      	b.n	80066a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fcf2 	bl	8007082 <USBD_CtlError>
          break;
 800669e:	e000      	b.n	80066a2 <USBD_StdItfReq+0xc2>
          break;
 80066a0:	bf00      	nop
      }
      break;
 80066a2:	e004      	b.n	80066ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fceb 	bl	8007082 <USBD_CtlError>
      break;
 80066ac:	bf00      	nop
  }

  return ret;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	889b      	ldrh	r3, [r3, #4]
 80066ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d007      	beq.n	80066e8 <USBD_StdEPReq+0x30>
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	f200 817f 	bhi.w	80069dc <USBD_StdEPReq+0x324>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d02a      	beq.n	8006738 <USBD_StdEPReq+0x80>
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	f040 817a 	bne.w	80069dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fe83 	bl	80063f8 <USBD_CoreFindEP>
 80066f2:	4603      	mov	r3, r0
 80066f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f6:	7b7b      	ldrb	r3, [r7, #13]
 80066f8:	2bff      	cmp	r3, #255	; 0xff
 80066fa:	f000 8174 	beq.w	80069e6 <USBD_StdEPReq+0x32e>
 80066fe:	7b7b      	ldrb	r3, [r7, #13]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f040 8170 	bne.w	80069e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006706:	7b7a      	ldrb	r2, [r7, #13]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800670e:	7b7a      	ldrb	r2, [r7, #13]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32ae      	adds	r2, #174	; 0xae
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8163 	beq.w	80069e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006720:	7b7a      	ldrb	r2, [r7, #13]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	; 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006736:	e156      	b.n	80069e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d008      	beq.n	8006752 <USBD_StdEPReq+0x9a>
 8006740:	2b03      	cmp	r3, #3
 8006742:	f300 8145 	bgt.w	80069d0 <USBD_StdEPReq+0x318>
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 809b 	beq.w	8006882 <USBD_StdEPReq+0x1ca>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d03c      	beq.n	80067ca <USBD_StdEPReq+0x112>
 8006750:	e13e      	b.n	80069d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d002      	beq.n	8006764 <USBD_StdEPReq+0xac>
 800675e:	2b03      	cmp	r3, #3
 8006760:	d016      	beq.n	8006790 <USBD_StdEPReq+0xd8>
 8006762:	e02c      	b.n	80067be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <USBD_StdEPReq+0xce>
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d00a      	beq.n	8006786 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 f93d 	bl	80079f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800677a:	2180      	movs	r1, #128	; 0x80
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f939 	bl	80079f4 <USBD_LL_StallEP>
 8006782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006784:	e020      	b.n	80067c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc7a 	bl	8007082 <USBD_CtlError>
              break;
 800678e:	e01b      	b.n	80067c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10e      	bne.n	80067b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <USBD_StdEPReq+0xfe>
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d008      	beq.n	80067b6 <USBD_StdEPReq+0xfe>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88db      	ldrh	r3, [r3, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f91f 	bl	80079f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd2e 	bl	8007218 <USBD_CtlSendStatus>

              break;
 80067bc:	e004      	b.n	80067c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fc5e 	bl	8007082 <USBD_CtlError>
              break;
 80067c6:	bf00      	nop
          }
          break;
 80067c8:	e107      	b.n	80069da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d002      	beq.n	80067dc <USBD_StdEPReq+0x124>
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d016      	beq.n	8006808 <USBD_StdEPReq+0x150>
 80067da:	e04b      	b.n	8006874 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <USBD_StdEPReq+0x146>
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b80      	cmp	r3, #128	; 0x80
 80067e6:	d00a      	beq.n	80067fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f901 	bl	80079f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f8fd 	bl	80079f4 <USBD_LL_StallEP>
 80067fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067fc:	e040      	b.n	8006880 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc3e 	bl	8007082 <USBD_CtlError>
              break;
 8006806:	e03b      	b.n	8006880 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d136      	bne.n	800687e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 f907 	bl	8007a32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fcf7 	bl	8007218 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fde2 	bl	80063f8 <USBD_CoreFindEP>
 8006834:	4603      	mov	r3, r0
 8006836:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006838:	7b7b      	ldrb	r3, [r7, #13]
 800683a:	2bff      	cmp	r3, #255	; 0xff
 800683c:	d01f      	beq.n	800687e <USBD_StdEPReq+0x1c6>
 800683e:	7b7b      	ldrb	r3, [r7, #13]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11c      	bne.n	800687e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006844:	7b7a      	ldrb	r2, [r7, #13]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800684c:	7b7a      	ldrb	r2, [r7, #13]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32ae      	adds	r2, #174	; 0xae
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800685c:	7b7a      	ldrb	r2, [r7, #13]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32ae      	adds	r2, #174	; 0xae
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
 8006870:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006872:	e004      	b.n	800687e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fc03 	bl	8007082 <USBD_CtlError>
              break;
 800687c:	e000      	b.n	8006880 <USBD_StdEPReq+0x1c8>
              break;
 800687e:	bf00      	nop
          }
          break;
 8006880:	e0ab      	b.n	80069da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d002      	beq.n	8006894 <USBD_StdEPReq+0x1dc>
 800688e:	2b03      	cmp	r3, #3
 8006890:	d032      	beq.n	80068f8 <USBD_StdEPReq+0x240>
 8006892:	e097      	b.n	80069c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <USBD_StdEPReq+0x1f2>
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d004      	beq.n	80068aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fbed 	bl	8007082 <USBD_CtlError>
                break;
 80068a8:	e091      	b.n	80069ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da0b      	bge.n	80068ca <USBD_StdEPReq+0x212>
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3310      	adds	r3, #16
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	3304      	adds	r3, #4
 80068c8:	e00b      	b.n	80068e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2202      	movs	r2, #2
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc37 	bl	8007164 <USBD_CtlSendData>
              break;
 80068f6:	e06a      	b.n	80069ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da11      	bge.n	8006924 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d117      	bne.n	800694a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fbb0 	bl	8007082 <USBD_CtlError>
                  break;
 8006922:	e054      	b.n	80069ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fb9d 	bl	8007082 <USBD_CtlError>
                  break;
 8006948:	e041      	b.n	80069ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800694a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694e:	2b00      	cmp	r3, #0
 8006950:	da0b      	bge.n	800696a <USBD_StdEPReq+0x2b2>
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	3310      	adds	r3, #16
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	e00b      	b.n	8006982 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <USBD_StdEPReq+0x2d8>
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	2b80      	cmp	r3, #128	; 0x80
 800698e:	d103      	bne.n	8006998 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e00e      	b.n	80069b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 f867 	bl	8007a70 <USBD_LL_IsStallEP>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2202      	movs	r2, #2
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fbd1 	bl	8007164 <USBD_CtlSendData>
              break;
 80069c2:	e004      	b.n	80069ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fb5b 	bl	8007082 <USBD_CtlError>
              break;
 80069cc:	bf00      	nop
          }
          break;
 80069ce:	e004      	b.n	80069da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb55 	bl	8007082 <USBD_CtlError>
          break;
 80069d8:	bf00      	nop
      }
      break;
 80069da:	e005      	b.n	80069e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb4f 	bl	8007082 <USBD_CtlError>
      break;
 80069e4:	e000      	b.n	80069e8 <USBD_StdEPReq+0x330>
      break;
 80069e6:	bf00      	nop
  }

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	f200 8128 	bhi.w	8006c6a <USBD_GetDescriptor+0x276>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_GetDescriptor+0x2c>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a3d 	.word	0x08006a3d
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a95 	.word	0x08006a95
 8006a2c:	08006c6b 	.word	0x08006c6b
 8006a30:	08006c6b 	.word	0x08006c6b
 8006a34:	08006c0b 	.word	0x08006c0b
 8006a38:	08006c37 	.word	0x08006c37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7c12      	ldrb	r2, [r2, #16]
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	60f8      	str	r0, [r7, #12]
      break;
 8006a52:	e112      	b.n	8006c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7c1b      	ldrb	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f107 0208 	add.w	r2, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	2202      	movs	r2, #2
 8006a74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a76:	e100      	b.n	8006c7a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	2202      	movs	r2, #2
 8006a90:	701a      	strb	r2, [r3, #0]
      break;
 8006a92:	e0f2      	b.n	8006c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	885b      	ldrh	r3, [r3, #2]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b05      	cmp	r3, #5
 8006a9c:	f200 80ac 	bhi.w	8006bf8 <USBD_GetDescriptor+0x204>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <USBD_GetDescriptor+0xb4>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006af5 	.word	0x08006af5
 8006ab0:	08006b29 	.word	0x08006b29
 8006ab4:	08006b5d 	.word	0x08006b5d
 8006ab8:	08006b91 	.word	0x08006b91
 8006abc:	08006bc5 	.word	0x08006bc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7c12      	ldrb	r2, [r2, #16]
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ae2:	e091      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 facb 	bl	8007082 <USBD_CtlError>
            err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
          break;
 8006af2:	e089      	b.n	8006c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b16:	e077      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fab1 	bl	8007082 <USBD_CtlError>
            err++;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	3301      	adds	r3, #1
 8006b24:	72fb      	strb	r3, [r7, #11]
          break;
 8006b26:	e06f      	b.n	8006c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	7c12      	ldrb	r2, [r2, #16]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b4a:	e05d      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa97 	bl	8007082 <USBD_CtlError>
            err++;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	3301      	adds	r3, #1
 8006b58:	72fb      	strb	r3, [r7, #11]
          break;
 8006b5a:	e055      	b.n	8006c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7c12      	ldrb	r2, [r2, #16]
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7e:	e043      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa7d 	bl	8007082 <USBD_CtlError>
            err++;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8e:	e03b      	b.n	8006c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bb2:	e029      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa63 	bl	8007082 <USBD_CtlError>
            err++;
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bc2:	e021      	b.n	8006c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be6:	e00f      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa49 	bl	8007082 <USBD_CtlError>
            err++;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf6:	e007      	b.n	8006c08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa41 	bl	8007082 <USBD_CtlError>
          err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c06:	bf00      	nop
      }
      break;
 8006c08:	e037      	b.n	8006c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1b      	ldrb	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4798      	blx	r3
 8006c22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c24:	e029      	b.n	8006c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa2a 	bl	8007082 <USBD_CtlError>
        err++;
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	3301      	adds	r3, #1
 8006c32:	72fb      	strb	r3, [r7, #11]
      break;
 8006c34:	e021      	b.n	8006c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7c1b      	ldrb	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10d      	bne.n	8006c5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f107 0208 	add.w	r2, r7, #8
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4798      	blx	r3
 8006c4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	2207      	movs	r2, #7
 8006c56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c58:	e00f      	b.n	8006c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa10 	bl	8007082 <USBD_CtlError>
        err++;
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	3301      	adds	r3, #1
 8006c66:	72fb      	strb	r3, [r7, #11]
      break;
 8006c68:	e007      	b.n	8006c7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa08 	bl	8007082 <USBD_CtlError>
      err++;
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	3301      	adds	r3, #1
 8006c76:	72fb      	strb	r3, [r7, #11]
      break;
 8006c78:	bf00      	nop
  }

  if (err != 0U)
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11e      	bne.n	8006cbe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88db      	ldrh	r3, [r3, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d016      	beq.n	8006cb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c88:	893b      	ldrh	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	88da      	ldrh	r2, [r3, #6]
 8006c92:	893b      	ldrh	r3, [r7, #8]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	bf28      	it	cs
 8006c98:	4613      	movcs	r3, r2
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c9e:	893b      	ldrh	r3, [r7, #8]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68f9      	ldr	r1, [r7, #12]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fa5d 	bl	8007164 <USBD_CtlSendData>
 8006caa:	e009      	b.n	8006cc0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9e7 	bl	8007082 <USBD_CtlError>
 8006cb4:	e004      	b.n	8006cc0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 faae 	bl	8007218 <USBD_CtlSendStatus>
 8006cbc:	e000      	b.n	8006cc0 <USBD_GetDescriptor+0x2cc>
    return;
 8006cbe:	bf00      	nop
  }
}
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop

08006cc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	889b      	ldrh	r3, [r3, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d131      	bne.n	8006d3e <USBD_SetAddress+0x76>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d12d      	bne.n	8006d3e <USBD_SetAddress+0x76>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	885b      	ldrh	r3, [r3, #2]
 8006ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce8:	d829      	bhi.n	8006d3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d104      	bne.n	8006d0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9bc 	bl	8007082 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	e01d      	b.n	8006d48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7bfa      	ldrb	r2, [r7, #15]
 8006d10:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fed5 	bl	8007ac8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa7a 	bl	8007218 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d32:	e009      	b.n	8006d48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3c:	e004      	b.n	8006d48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f99e 	bl	8007082 <USBD_CtlError>
  }
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	4b4e      	ldr	r3, [pc, #312]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006d66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d68:	4b4d      	ldr	r3, [pc, #308]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d905      	bls.n	8006d7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f985 	bl	8007082 <USBD_CtlError>
    return USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e08c      	b.n	8006e96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d002      	beq.n	8006d8e <USBD_SetConfig+0x3e>
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d029      	beq.n	8006de0 <USBD_SetConfig+0x90>
 8006d8c:	e075      	b.n	8006e7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d8e:	4b44      	ldr	r3, [pc, #272]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d020      	beq.n	8006dd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d96:	4b42      	ldr	r3, [pc, #264]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006da0:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fe ffe7 	bl	8005d7a <USBD_SetClassConfig>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f962 	bl	8007082 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dc6:	e065      	b.n	8006e94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa25 	bl	8007218 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dd6:	e05d      	b.n	8006e94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fa1d 	bl	8007218 <USBD_CtlSendStatus>
      break;
 8006dde:	e059      	b.n	8006e94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006de0:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d112      	bne.n	8006e0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006df0:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe ffd6 	bl	8005db2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa06 	bl	8007218 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e0c:	e042      	b.n	8006e94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e0e:	4b24      	ldr	r3, [pc, #144]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d02a      	beq.n	8006e72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fe ffc4 	bl	8005db2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e34:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe ff9d 	bl	8005d7a <USBD_SetClassConfig>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00f      	beq.n	8006e6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f918 	bl	8007082 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fe ffa9 	bl	8005db2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e68:	e014      	b.n	8006e94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9d4 	bl	8007218 <USBD_CtlSendStatus>
      break;
 8006e70:	e010      	b.n	8006e94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f9d0 	bl	8007218 <USBD_CtlSendStatus>
      break;
 8006e78:	e00c      	b.n	8006e94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f900 	bl	8007082 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <USBD_SetConfig+0x150>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fe ff92 	bl	8005db2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	73fb      	strb	r3, [r7, #15]
      break;
 8006e92:	bf00      	nop
  }

  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000164 	.word	0x20000164

08006ea4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88db      	ldrh	r3, [r3, #6]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d004      	beq.n	8006ec0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8e2 	bl	8007082 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ebe:	e023      	b.n	8006f08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	dc02      	bgt.n	8006ed2 <USBD_GetConfig+0x2e>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dc03      	bgt.n	8006ed8 <USBD_GetConfig+0x34>
 8006ed0:	e015      	b.n	8006efe <USBD_GetConfig+0x5a>
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d00b      	beq.n	8006eee <USBD_GetConfig+0x4a>
 8006ed6:	e012      	b.n	8006efe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f93c 	bl	8007164 <USBD_CtlSendData>
        break;
 8006eec:	e00c      	b.n	8006f08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f934 	bl	8007164 <USBD_CtlSendData>
        break;
 8006efc:	e004      	b.n	8006f08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f8be 	bl	8007082 <USBD_CtlError>
        break;
 8006f06:	bf00      	nop
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d81e      	bhi.n	8006f66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	88db      	ldrh	r3, [r3, #6]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d004      	beq.n	8006f3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8a5 	bl	8007082 <USBD_CtlError>
        break;
 8006f38:	e01a      	b.n	8006f70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f043 0202 	orr.w	r2, r3, #2
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f900 	bl	8007164 <USBD_CtlSendData>
      break;
 8006f64:	e004      	b.n	8006f70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f88a 	bl	8007082 <USBD_CtlError>
      break;
 8006f6e:	bf00      	nop
  }
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	885b      	ldrh	r3, [r3, #2]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f940 	bl	8007218 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f98:	e013      	b.n	8006fc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	885b      	ldrh	r3, [r3, #2]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d10b      	bne.n	8006fba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	889b      	ldrh	r3, [r3, #4]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f930 	bl	8007218 <USBD_CtlSendStatus>
}
 8006fb8:	e003      	b.n	8006fc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f860 	bl	8007082 <USBD_CtlError>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d80b      	bhi.n	8006ffa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d10c      	bne.n	8007004 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f910 	bl	8007218 <USBD_CtlSendStatus>
      }
      break;
 8006ff8:	e004      	b.n	8007004 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f840 	bl	8007082 <USBD_CtlError>
      break;
 8007002:	e000      	b.n	8007006 <USBD_ClrFeature+0x3c>
      break;
 8007004:	bf00      	nop
  }
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	781a      	ldrb	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff fa41 	bl	80064c0 <SWAPBYTE>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff fa34 	bl	80064c0 <SWAPBYTE>
 8007058:	4603      	mov	r3, r0
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fa27 	bl	80064c0 <SWAPBYTE>
 8007072:	4603      	mov	r3, r0
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	80da      	strh	r2, [r3, #6]
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800708c:	2180      	movs	r1, #128	; 0x80
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fcb0 	bl	80079f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007094:	2100      	movs	r1, #0
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fcac 	bl	80079f4 <USBD_LL_StallEP>
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d036      	beq.n	8007128 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f000 f836 	bl	8007130 <USBD_GetLen>
 80070c4:	4603      	mov	r3, r0
 80070c6:	3301      	adds	r3, #1
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	4413      	add	r3, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	3301      	adds	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	2203      	movs	r2, #3
 80070ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070f4:	e013      	b.n	800711e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4413      	add	r3, r2
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
    idx++;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	3301      	adds	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	4413      	add	r3, r2
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
    idx++;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	3301      	adds	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e7      	bne.n	80070f6 <USBD_GetString+0x52>
 8007126:	e000      	b.n	800712a <USBD_GetString+0x86>
    return;
 8007128:	bf00      	nop
  }
}
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007140:	e005      	b.n	800714e <USBD_GetLen+0x1e>
  {
    len++;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	3301      	adds	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3301      	adds	r3, #1
 800714c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f5      	bne.n	8007142 <USBD_GetLen+0x12>
  }

  return len;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2202      	movs	r2, #2
 8007174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	2100      	movs	r1, #0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fcbb 	bl	8007b06 <USBD_LL_Transmit>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	2100      	movs	r1, #0
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fcaa 	bl	8007b06 <USBD_LL_Transmit>

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2203      	movs	r2, #3
 80071cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fcae 	bl	8007b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	2100      	movs	r1, #0
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fc9d 	bl	8007b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2204      	movs	r2, #4
 8007224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007228:	2300      	movs	r3, #0
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc69 	bl	8007b06 <USBD_LL_Transmit>

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2205      	movs	r2, #5
 800724a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800724e:	2300      	movs	r3, #0
 8007250:	2200      	movs	r2, #0
 8007252:	2100      	movs	r1, #0
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc77 	bl	8007b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007268:	2200      	movs	r2, #0
 800726a:	4912      	ldr	r1, [pc, #72]	; (80072b4 <MX_USB_DEVICE_Init+0x50>)
 800726c:	4812      	ldr	r0, [pc, #72]	; (80072b8 <MX_USB_DEVICE_Init+0x54>)
 800726e:	f7fe fd07 	bl	8005c80 <USBD_Init>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007278:	f7f9 fa84 	bl	8000784 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800727c:	490f      	ldr	r1, [pc, #60]	; (80072bc <MX_USB_DEVICE_Init+0x58>)
 800727e:	480e      	ldr	r0, [pc, #56]	; (80072b8 <MX_USB_DEVICE_Init+0x54>)
 8007280:	f7fe fd2e 	bl	8005ce0 <USBD_RegisterClass>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800728a:	f7f9 fa7b 	bl	8000784 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800728e:	490c      	ldr	r1, [pc, #48]	; (80072c0 <MX_USB_DEVICE_Init+0x5c>)
 8007290:	4809      	ldr	r0, [pc, #36]	; (80072b8 <MX_USB_DEVICE_Init+0x54>)
 8007292:	f7fe fc65 	bl	8005b60 <USBD_CDC_RegisterInterface>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800729c:	f7f9 fa72 	bl	8000784 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <MX_USB_DEVICE_Init+0x54>)
 80072a2:	f7fe fd53 	bl	8005d4c <USBD_Start>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072ac:	f7f9 fa6a 	bl	8000784 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072b0:	bf00      	nop
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200000ac 	.word	0x200000ac
 80072b8:	20000168 	.word	0x20000168
 80072bc:	20000018 	.word	0x20000018
 80072c0:	20000098 	.word	0x20000098

080072c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072c8:	2200      	movs	r2, #0
 80072ca:	4905      	ldr	r1, [pc, #20]	; (80072e0 <CDC_Init_FS+0x1c>)
 80072cc:	4805      	ldr	r0, [pc, #20]	; (80072e4 <CDC_Init_FS+0x20>)
 80072ce:	f7fe fc61 	bl	8005b94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072d2:	4905      	ldr	r1, [pc, #20]	; (80072e8 <CDC_Init_FS+0x24>)
 80072d4:	4803      	ldr	r0, [pc, #12]	; (80072e4 <CDC_Init_FS+0x20>)
 80072d6:	f7fe fc7f 	bl	8005bd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072dc:	4618      	mov	r0, r3
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000c44 	.word	0x20000c44
 80072e4:	20000168 	.word	0x20000168
 80072e8:	20000444 	.word	0x20000444

080072ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
 8007308:	4613      	mov	r3, r2
 800730a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	2b23      	cmp	r3, #35	; 0x23
 8007310:	d84a      	bhi.n	80073a8 <CDC_Control_FS+0xac>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <CDC_Control_FS+0x1c>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	080073a9 	.word	0x080073a9
 800731c:	080073a9 	.word	0x080073a9
 8007320:	080073a9 	.word	0x080073a9
 8007324:	080073a9 	.word	0x080073a9
 8007328:	080073a9 	.word	0x080073a9
 800732c:	080073a9 	.word	0x080073a9
 8007330:	080073a9 	.word	0x080073a9
 8007334:	080073a9 	.word	0x080073a9
 8007338:	080073a9 	.word	0x080073a9
 800733c:	080073a9 	.word	0x080073a9
 8007340:	080073a9 	.word	0x080073a9
 8007344:	080073a9 	.word	0x080073a9
 8007348:	080073a9 	.word	0x080073a9
 800734c:	080073a9 	.word	0x080073a9
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080073a9 	.word	0x080073a9
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073a9 	.word	0x080073a9
 8007364:	080073a9 	.word	0x080073a9
 8007368:	080073a9 	.word	0x080073a9
 800736c:	080073a9 	.word	0x080073a9
 8007370:	080073a9 	.word	0x080073a9
 8007374:	080073a9 	.word	0x080073a9
 8007378:	080073a9 	.word	0x080073a9
 800737c:	080073a9 	.word	0x080073a9
 8007380:	080073a9 	.word	0x080073a9
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073a9 	.word	0x080073a9
 800738c:	080073a9 	.word	0x080073a9
 8007390:	080073a9 	.word	0x080073a9
 8007394:	080073a9 	.word	0x080073a9
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073a9 	.word	0x080073a9
 80073a0:	080073a9 	.word	0x080073a9
 80073a4:	080073a9 	.word	0x080073a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073a8:	bf00      	nop
  }

  return (USBD_OK);
 80073aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4805      	ldr	r0, [pc, #20]	; (80073dc <CDC_Receive_FS+0x24>)
 80073c6:	f7fe fc07 	bl	8005bd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073ca:	4804      	ldr	r0, [pc, #16]	; (80073dc <CDC_Receive_FS+0x24>)
 80073cc:	f7fe fc22 	bl	8005c14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80073d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000168 	.word	0x20000168

080073e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2212      	movs	r2, #18
 8007414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007416:	4b03      	ldr	r3, [pc, #12]	; (8007424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	200000c8 	.word	0x200000c8

08007428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2204      	movs	r2, #4
 8007438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	200000dc 	.word	0x200000dc

0800744c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4907      	ldr	r1, [pc, #28]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
 8007462:	4808      	ldr	r0, [pc, #32]	; (8007484 <USBD_FS_ProductStrDescriptor+0x38>)
 8007464:	f7ff fe1e 	bl	80070a4 <USBD_GetString>
 8007468:	e004      	b.n	8007474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4904      	ldr	r1, [pc, #16]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
 800746e:	4805      	ldr	r0, [pc, #20]	; (8007484 <USBD_FS_ProductStrDescriptor+0x38>)
 8007470:	f7ff fe18 	bl	80070a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007474:	4b02      	ldr	r3, [pc, #8]	; (8007480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001444 	.word	0x20001444
 8007484:	08007ca8 	.word	0x08007ca8

08007488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	4904      	ldr	r1, [pc, #16]	; (80074a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007498:	4804      	ldr	r0, [pc, #16]	; (80074ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800749a:	f7ff fe03 	bl	80070a4 <USBD_GetString>
  return USBD_StrDesc;
 800749e:	4b02      	ldr	r3, [pc, #8]	; (80074a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20001444 	.word	0x20001444
 80074ac:	08007cc0 	.word	0x08007cc0

080074b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	221a      	movs	r2, #26
 80074c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074c2:	f000 f843 	bl	800754c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074c6:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200000e0 	.word	0x200000e0

080074d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4907      	ldr	r1, [pc, #28]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ea:	4808      	ldr	r0, [pc, #32]	; (800750c <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ec:	f7ff fdda 	bl	80070a4 <USBD_GetString>
 80074f0:	e004      	b.n	80074fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4904      	ldr	r1, [pc, #16]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f8:	f7ff fdd4 	bl	80070a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001444 	.word	0x20001444
 800750c:	08007cd4 	.word	0x08007cd4

08007510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4907      	ldr	r1, [pc, #28]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007526:	4808      	ldr	r0, [pc, #32]	; (8007548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007528:	f7ff fdbc 	bl	80070a4 <USBD_GetString>
 800752c:	e004      	b.n	8007538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4904      	ldr	r1, [pc, #16]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007532:	4805      	ldr	r0, [pc, #20]	; (8007548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007534:	f7ff fdb6 	bl	80070a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007538:	4b02      	ldr	r3, [pc, #8]	; (8007544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20001444 	.word	0x20001444
 8007548:	08007ce0 	.word	0x08007ce0

0800754c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <Get_SerialNum+0x44>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007558:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <Get_SerialNum+0x48>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <Get_SerialNum+0x4c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007572:	2208      	movs	r2, #8
 8007574:	4909      	ldr	r1, [pc, #36]	; (800759c <Get_SerialNum+0x50>)
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 f814 	bl	80075a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800757c:	2204      	movs	r2, #4
 800757e:	4908      	ldr	r1, [pc, #32]	; (80075a0 <Get_SerialNum+0x54>)
 8007580:	68b8      	ldr	r0, [r7, #8]
 8007582:	f000 f80f 	bl	80075a4 <IntToUnicode>
  }
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	1fff7a10 	.word	0x1fff7a10
 8007594:	1fff7a14 	.word	0x1fff7a14
 8007598:	1fff7a18 	.word	0x1fff7a18
 800759c:	200000e2 	.word	0x200000e2
 80075a0:	200000f2 	.word	0x200000f2

080075a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	e027      	b.n	800760c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0f1b      	lsrs	r3, r3, #28
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d80b      	bhi.n	80075dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	0f1b      	lsrs	r3, r3, #28
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4619      	mov	r1, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	440b      	add	r3, r1
 80075d4:	3230      	adds	r2, #48	; 0x30
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e00a      	b.n	80075f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	0f1b      	lsrs	r3, r3, #28
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	440b      	add	r3, r1
 80075ec:	3237      	adds	r2, #55	; 0x37
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	3301      	adds	r3, #1
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	3301      	adds	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
 800760c:	7dfa      	ldrb	r2, [r7, #23]
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	429a      	cmp	r2, r3
 8007612:	d3d3      	bcc.n	80075bc <IntToUnicode+0x18>
  }
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	; 0x28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800762c:	f107 0314 	add.w	r3, r7, #20
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007644:	d13a      	bne.n	80076bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	4b1e      	ldr	r3, [pc, #120]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	6313      	str	r3, [r2, #48]	; 0x30
 8007656:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007668:	2302      	movs	r3, #2
 800766a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007670:	2303      	movs	r3, #3
 8007672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007674:	230a      	movs	r3, #10
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	4619      	mov	r1, r3
 800767e:	4812      	ldr	r0, [pc, #72]	; (80076c8 <HAL_PCD_MspInit+0xa4>)
 8007680:	f7f9 fb1e 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	4a0e      	ldr	r2, [pc, #56]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 800768a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768e:	6353      	str	r3, [r2, #52]	; 0x34
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 8007696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007698:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 800769a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769e:	6453      	str	r3, [r2, #68]	; 0x44
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <HAL_PCD_MspInit+0xa0>)
 80076a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	2043      	movs	r0, #67	; 0x43
 80076b2:	f7f9 face 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076b6:	2043      	movs	r0, #67	; 0x43
 80076b8:	f7f9 fae7 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076bc:	bf00      	nop
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40020000 	.word	0x40020000

080076cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f7fe fb7f 	bl	8005de6 <USBD_LL_SetupStage>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	4619      	mov	r1, r3
 800771a:	f7fe fbb9 	bl	8005e90 <USBD_LL_DataOutStage>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	334c      	adds	r3, #76	; 0x4c
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	4619      	mov	r1, r3
 800774e:	f7fe fc52 	bl	8005ff6 <USBD_LL_DataInStage>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fd86 	bl	800627a <USBD_LL_SOF>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d001      	beq.n	800778e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800778a:	f7f8 fffb 	bl	8000784 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007794:	7bfa      	ldrb	r2, [r7, #15]
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fd30 	bl	80061fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fe fcd8 	bl	800615a <USBD_LL_Reset>
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fd2b 	bl	800621e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <HAL_PCD_SuspendCallback+0x48>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	4a03      	ldr	r2, [pc, #12]	; (80077fc <HAL_PCD_SuspendCallback+0x48>)
 80077ee:	f043 0306 	orr.w	r3, r3, #6
 80077f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	e000ed00 	.word	0xe000ed00

08007800 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fd1b 	bl	800624a <USBD_LL_Resume>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fd73 	bl	800631e <USBD_LL_IsoOUTIncomplete>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fd2f 	bl	80062ba <USBD_LL_IsoINIncomplete>
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fd85 	bl	8006382 <USBD_LL_DevConnected>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fd82 	bl	8006398 <USBD_LL_DevDisconnected>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d13c      	bne.n	8007926 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078ac:	4a20      	ldr	r2, [pc, #128]	; (8007930 <USBD_LL_Init+0x94>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a1e      	ldr	r2, [pc, #120]	; (8007930 <USBD_LL_Init+0x94>)
 80078b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078bc:	4b1c      	ldr	r3, [pc, #112]	; (8007930 <USBD_LL_Init+0x94>)
 80078be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078c4:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <USBD_LL_Init+0x94>)
 80078c6:	2204      	movs	r2, #4
 80078c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078ca:	4b19      	ldr	r3, [pc, #100]	; (8007930 <USBD_LL_Init+0x94>)
 80078cc:	2202      	movs	r2, #2
 80078ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078d0:	4b17      	ldr	r3, [pc, #92]	; (8007930 <USBD_LL_Init+0x94>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078d6:	4b16      	ldr	r3, [pc, #88]	; (8007930 <USBD_LL_Init+0x94>)
 80078d8:	2202      	movs	r2, #2
 80078da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078dc:	4b14      	ldr	r3, [pc, #80]	; (8007930 <USBD_LL_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078e2:	4b13      	ldr	r3, [pc, #76]	; (8007930 <USBD_LL_Init+0x94>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <USBD_LL_Init+0x94>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <USBD_LL_Init+0x94>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <USBD_LL_Init+0x94>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078fa:	480d      	ldr	r0, [pc, #52]	; (8007930 <USBD_LL_Init+0x94>)
 80078fc:	f7f9 fb7d 	bl	8000ffa <HAL_PCD_Init>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007906:	f7f8 ff3d 	bl	8000784 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	4808      	ldr	r0, [pc, #32]	; (8007930 <USBD_LL_Init+0x94>)
 800790e:	f7fa fdd4 	bl	80024ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007912:	2240      	movs	r2, #64	; 0x40
 8007914:	2100      	movs	r1, #0
 8007916:	4806      	ldr	r0, [pc, #24]	; (8007930 <USBD_LL_Init+0x94>)
 8007918:	f7fa fd88 	bl	800242c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	2101      	movs	r1, #1
 8007920:	4803      	ldr	r0, [pc, #12]	; (8007930 <USBD_LL_Init+0x94>)
 8007922:	f7fa fd83 	bl	800242c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20001644 	.word	0x20001644

08007934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800794a:	4618      	mov	r0, r3
 800794c:	f7f9 fc72 	bl	8001234 <HAL_PCD_Start>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f942 	bl	8007be0 <USBD_Get_USB_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	461a      	mov	r2, r3
 8007978:	4603      	mov	r3, r0
 800797a:	70fb      	strb	r3, [r7, #3]
 800797c:	460b      	mov	r3, r1
 800797e:	70bb      	strb	r3, [r7, #2]
 8007980:	4613      	mov	r3, r2
 8007982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007992:	78bb      	ldrb	r3, [r7, #2]
 8007994:	883a      	ldrh	r2, [r7, #0]
 8007996:	78f9      	ldrb	r1, [r7, #3]
 8007998:	f7fa f943 	bl	8001c22 <HAL_PCD_EP_Open>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f91c 	bl	8007be0 <USBD_Get_USB_Status>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fa f98c 	bl	8001cf2 <HAL_PCD_EP_Close>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f8fd 	bl	8007be0 <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fa fa64 	bl	8001ee0 <HAL_PCD_EP_SetStall>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f8de 	bl	8007be0 <USBD_Get_USB_Status>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fa faa9 	bl	8001fa8 <HAL_PCD_EP_ClrStall>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f8bf 	bl	8007be0 <USBD_Get_USB_Status>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da0b      	bge.n	8007aa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	333e      	adds	r3, #62	; 0x3e
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	e00b      	b.n	8007abc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007aba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fa f876 	bl	8001bd8 <HAL_PCD_SetAddress>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f874 	bl	8007be0 <USBD_Get_USB_Status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b086      	sub	sp, #24
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	460b      	mov	r3, r1
 8007b14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b24:	7af9      	ldrb	r1, [r7, #11]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	f7fa f98f 	bl	8001e4c <HAL_PCD_EP_Transmit>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f853 	bl	8007be0 <USBD_Get_USB_Status>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	460b      	mov	r3, r1
 8007b56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b66:	7af9      	ldrb	r1, [r7, #11]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	f7fa f90b 	bl	8001d86 <HAL_PCD_EP_Receive>
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f832 	bl	8007be0 <USBD_Get_USB_Status>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fa f93b 	bl	8001e1c <HAL_PCD_EP_GetRxCount>
 8007ba6:	4603      	mov	r3, r0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bb8:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_static_malloc+0x18>)
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20001b50 	.word	0x20001b50

08007bcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d817      	bhi.n	8007c24 <USBD_Get_USB_Status+0x44>
 8007bf4:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <USBD_Get_USB_Status+0x1c>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c13 	.word	0x08007c13
 8007c04:	08007c19 	.word	0x08007c19
 8007c08:	08007c1f 	.word	0x08007c1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c10:	e00b      	b.n	8007c2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	73fb      	strb	r3, [r7, #15]
    break;
 8007c16:	e008      	b.n	8007c2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e005      	b.n	8007c2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e002      	b.n	8007c2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	bf00      	nop
  }
  return usb_status;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4d0d      	ldr	r5, [pc, #52]	; (8007c70 <__libc_init_array+0x38>)
 8007c3c:	4c0d      	ldr	r4, [pc, #52]	; (8007c74 <__libc_init_array+0x3c>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	2600      	movs	r6, #0
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	4d0b      	ldr	r5, [pc, #44]	; (8007c78 <__libc_init_array+0x40>)
 8007c4a:	4c0c      	ldr	r4, [pc, #48]	; (8007c7c <__libc_init_array+0x44>)
 8007c4c:	f000 f820 	bl	8007c90 <_init>
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	2600      	movs	r6, #0
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	4798      	blx	r3
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	4798      	blx	r3
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	08007d08 	.word	0x08007d08
 8007c74:	08007d08 	.word	0x08007d08
 8007c78:	08007d08 	.word	0x08007d08
 8007c7c:	08007d0c 	.word	0x08007d0c

08007c80 <memset>:
 8007c80:	4402      	add	r2, r0
 8007c82:	4603      	mov	r3, r0
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d100      	bne.n	8007c8a <memset+0xa>
 8007c88:	4770      	bx	lr
 8007c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8e:	e7f9      	b.n	8007c84 <memset+0x4>

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
